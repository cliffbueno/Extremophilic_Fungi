suppressWarnings(suppressMessages(library(readxl))) # For read_xlsx
suppressWarnings(suppressMessages(library(janitor))) # For cleaning
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plyr))) # For data manipulation
suppressWarnings(suppressMessages(library(tidyverse))) # For data manipulation
suppressWarnings(suppressMessages(library(reshape2))) # For melting
suppressWarnings(suppressMessages(library(vegan))) # For analysis
suppressWarnings(suppressMessages(library(car))) # For leveneTest
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc test
suppressWarnings(suppressMessages(library(indicspecies))) # For multipatt
suppressWarnings(suppressMessages(library(scales))) # For muted
suppressWarnings(suppressMessages(library(DESeq2))) # For normalization
suppressWarnings(suppressMessages(library(FSA))) # For standard error
suppressWarnings(suppressMessages(library(mctoolsr))) # For taxonomic analysis
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel graphs
suppressWarnings(suppressMessages(library(plotly))) # For interactive graphs
suppressWarnings(suppressMessages(library(RColorBrewer))) # For color palettes
suppressWarnings(suppressMessages(library(dendextend))) # For dendrogram plots
suppressWarnings(suppressMessages(library(viridis))) # For viridis palette
suppressWarnings(suppressMessages(library(gplots))) # For heatmaps
suppressWarnings(suppressMessages(library(maps))) # For geographic maps
suppressWarnings(suppressMessages(library(mapproj))) # For geographic maps
suppressWarnings(suppressMessages(library(magrittr))) # For setting column names
suppressWarnings(suppressMessages(library(writexl))) # For writing Excel file
suppressWarnings(suppressMessages(library(plotrix))) # For standard error
suppressWarnings(suppressMessages(library(emmeans))) # For Tukey
suppressWarnings(suppressMessages(library(multcomp))) # For Tukey
suppressWarnings(suppressMessages(library(RCurl))) # For KEGG
suppressWarnings(suppressMessages(library(KEGGREST))) # For KEGG
suppressWarnings(suppressMessages(library(multcompView))) # For significance letters
suppressWarnings(suppressMessages(library(rcompanion))) # For significance letters
suppressWarnings(suppressMessages(library(pheatmap))) # For heatmaps
suppressWarnings(suppressMessages(library(qvalue))) # For qvalue
suppressWarnings(suppressMessages(library(writexl))) # For writing to Excel
suppressWarnings(suppressMessages(library(ggpubr))) # For density plots
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc
suppressWarnings(suppressMessages(library(DirichletReg))) # For analyzing proportions
suppressWarnings(suppressMessages(library(MASS))) # For zinf reg
suppressWarnings(suppressMessages(library(pscl))) # For zinf reg
suppressWarnings(suppressMessages(library(boot))) # For zinf reg
suppressWarnings(suppressMessages(library(gamlss))) # For zinf reg
suppressWarnings(suppressMessages(library(writexl))) # Write Excel spreadsheets
# Working directory (GitHub repository)
setwd("~/Documents/GitHub/Extremophilic_Fungi/")
# Note directory is organized into folders for code and data
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
`%notin%` <- Negate(`%in%`)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 5) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
source("code/plot_multipatt.R")
source("code/compareBC.R")
# Custom color palette from Benjamin Young
color_mapping <- c(
"Acid mine drainage" = "darkorange",
"Cryosphere - soil" = "lightskyblue3",
"Cryosphere - water" = "royalblue",
"Desert" = "burlywood2",
"Glacial forefield" = "grey70",
"Hot spring" = "red",
"Hydrothermal vent" = "firebrick4",
"Hypersaline" = "plum2",
"Soda lake" = "magenta3"
)
# So far used Kruskal-Wallis + Nemenyi posthoc
# May want to update some stats to zero-inflated negative binomial regression instead
# If using ANOVA and Tukey, can use this code to get sig. letters
# Example from genus richness
#tuk <- emmeans(object = m, specs = "Environment") %>%
#  cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
#  mutate(name = "rich",
#     y = max(input_fungi$map_loaded$rich)+(max(input_fungi$map_loaded$rich)-min(input_fungi$map_loaded$rich))/20)
#### _Table S1 ####
# Add number of scaffolds
ts1 <- read_excel("data/TableS1_noscaff.xlsx")
scaff <- read.delim("data/ScaffoldCount.txt")
View(ts1)
View(scaff)
names(scaff)
scaff <- read.delim("data/ScaffoldCount.txt") %>%
select(taxonoid, Scaffold.Count.....assembled)
scaff <- read.delim("data/ScaffoldCount.txt") %>%
dplyr::select(taxonoid, Scaffold.Count.....assembled)
scaff <- read.delim("data/ScaffoldCount.txt") %>%
dplyr::select(taxon_oid, Scaffold.Count.....assembled)
names(ts1)
ts1$ScaffoldCount
View(ts1)
View(scaff)
View(ts1)
ts1 <- read_excel("data/TableS1_noscaff.xlsx") %>%
left_join(., scaff, by = "taxon_oid") %>%
mutate(ScaffoldCount = Scaffold.Count.....assembled) %>%
dplyr::select(-Scaffold.Count.....assembled)
names(ts1)
ts1$ScaffoldCount
sum(is.na(ts1$ScaffoldCount))
check <- ts1 %>%
filter(is.na(ScaffoldCount) == T)
View(check)
#### _Table S1 ####
# Add number of scaffolds
scaff_cryo <- read.delim("data/ScaffoldCount_cryo.txt")
scaff <- read.delim("data/ScaffoldCount.txt") %>%
dplyr::select(taxon_oid, Scaffold.Count.....assembled) %>%
rbind(., scaff_cryo)
#### _Table S1 ####
# Add number of scaffolds
scaff_cryo <- read.delim("data/ScaffoldCount_cryo.txt") %>%
dplyr::select(taxon_oid, Scaffold.Count.....assembled)
scaff <- read.delim("data/ScaffoldCount.txt") %>%
dplyr::select(taxon_oid, Scaffold.Count.....assembled) %>%
rbind(., scaff_cryo)
ts1 <- read_excel("data/TableS1_noscaff.xlsx") %>%
left_join(., scaff, by = "taxon_oid") %>%
mutate(ScaffoldCount = Scaffold.Count.....assembled) %>%
dplyr::select(-Scaffold.Count.....assembled)
names(ts1)
ts1$ScaffoldCount
sum(is.na(ts1$ScaffoldCount))
check <- ts1 %>%
filter(is.na(ScaffoldCount) == T)
View(check)
View(ts1)
# Remove unnecessary columns
ts1 <- ts1 %>%
dplyr(-IMG.Genome.ID, -Day, -Month, -Year, -sampleID, -Study.Name2, -Location2, -EnvGeo)
# Remove unnecessary columns
ts1 <- ts1 %>%
dplyr::select(-IMG.Genome.ID, -Day, -Month, -Year, -sampleID, -Study.Name2, -Location2, -EnvGeo)
View(ts1)
ts1 <- read_excel("data/TableS1_noscaff.xlsx") %>%
left_join(., scaff, by = "taxon_oid") %>%
mutate(ScaffoldCount = Scaffold.Count.....assembled) %>%
dplyr::select(-Scaffold.Count.....assembled)
# Remove unnecessary columns
ts1 <- ts1 %>%
dplyr::select(-IMG.Genome.ID, -Day, -Month, -Year, -sampleID,
-GenomeSize, -Study.Name2, -Location2, -EnvGeo)
View(ts1)
write_xlsx(ts1, "data/TableS1.xlsx", format_headers = F)
View(ts1)
names(ts1)
ts1 <- read_excel("data/TableS1_noscaff.xlsx") %>%
left_join(., scaff, by = "taxon_oid") %>%
mutate(ScaffoldCount = Scaffold.Count.....assembled) %>%
dplyr::select(-Scaffold.Count.....assembled, -IMG.Genome.ID, -Day, -Month, -Year, -sampleID,
-GenomeSize, -Study.Name2, -Location2, -EnvGeo) %>%
arrange(Environment, Study.Name, Genome.Name...Sample.Name)
write_xlsx(ts1, "data/TableS1.xlsx", format_headers = F)
