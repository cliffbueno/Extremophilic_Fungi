labs(x = "Salinity (ppt)",
y = "CH4 (ug/m2/h)") +
theme_bw()
# Show trends by estuary
pdf("InitialFigs/Comb_All_CH4_Salinity.pdf", width = 9, height = 4)
ggplot(metaComb, aes(Salinity_ppt_all, CH4_ug_m2_h)) +
geom_point(aes(color = Estuary)) +
geom_smooth(method = "lm") +
scale_y_log10() +
scale_color_viridis_d() +
facet_wrap(~ Estuary, ncol = 4) +
labs(x = "Salinity (ppt)",
y = "CH4 (ug/m2/h)") +
theme_bw()
# Show trends by estuary
pdf("InitialFigs/Comb_All_CH4_Salinity.pdf", width = 9, height = 4)
dev.off()
# Show trends by estuary
pdf("InitialFigs/Comb_All_CH4_Salinity.pdf", width = 9, height = 4)
pdf("InitialFigs/Comb_All_CH4.pdf", width = 7, height = 5)
dev.off()
library(cowplot)
library(pheatmap)
seq(1:17)
seq(17:1)
install.packages("codyn")
library(codyn) # Turnover
install.packages("iCAMP")
library(iCamp)
library(iCAMP)
library(PMCMRplus)
library(ggtree)
library(plyr)
library(tidyverse)
library(ape)
library(picante)
library(dendextend)
library(readxl)
library(scales)
library(pheatmap)
library(RColorBrewer)
library(ggtree)
#### 2. Tree ####
# Tree from KBase made with 49 COGs
TL_tree <- read.tree("~/Documents/GitHub/Timberlake/dRep_Tree_20-labels.newick")
# Prune the one non-MAG
TL_tree <- drop.tip(TL_tree, tip = "Frateuriasp.Soil773")
# Trim the tip labels
TL_tree$tip.label <- substr(TL_tree$tip.label, start = 1, stop = nchar(TL_tree$tip.label)-11)
# Trim the node labels
TL_tree$node.label <- as.character(round(as.numeric(TL_tree$node.label), digits = 2))
TL_tree$node.label <- replace_na(TL_tree$node.label, replace = "")
par(oma = c(1,0,0,1))
plot.phylo(TL_tree,
align.tip.label = T,
no.margin = T,
font = 1,
cex = 0.6,
edge.width = 2,
show.node.label = T,
node.pos = 1,
label.offset = 0.005,
adj = 0)
add.scale.bar(x = 0.5, y = 0.5)
title("MAG Phylogeny\nfrom 49 COGs", adj = 0.1, line = -3)
text(x = 0.15, y = 1.5, label = "Archaea")
text(x = 0.15, y = 6.6, label = "Bacteria")
dev.off()
par(oma = c(1,0,0,1))
plot.phylo(TL_tree,
align.tip.label = T,
no.margin = T,
font = 1,
cex = 0.6,
edge.width = 2,
show.node.label = T,
node.pos = 1,
label.offset = 0.005,
adj = 0)
add.scale.bar(x = 0.5, y = 0.5)
text(x = 0.15, y = 1.5, label = "Archaea")
text(x = 0.15, y = 6.6, label = "Bacteria")
dev.off()
# Plot with ggtree
ggtree(TL_tree)
rlang::last_error()
rlang::last_trace()
devtools::install("dplyr", version = "1.0.5")
install_version("dplyr", version = "1.0.5", repos = "http://cran.us.r-project.org")
library(devtools)
install_version("dplyr", version = "1.0.5", repos = "http://cran.us.r-project.org")
library(ggplot2)
library(ggh4x)
suppressWarnings(suppressMessages(library(readxl))) # For read_xlsx
suppressWarnings(suppressMessages(library(janitor))) # For cleaning
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plyr))) # For data manipulation
suppressWarnings(suppressMessages(library(tidyverse))) # For data manipulation
suppressWarnings(suppressMessages(library(reshape2))) # For melting
suppressWarnings(suppressMessages(library(vegan))) # For analysis
suppressWarnings(suppressMessages(library(car))) # For leveneTest
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc test
suppressWarnings(suppressMessages(library(indicspecies))) # For multipatt
suppressWarnings(suppressMessages(library(scales))) # For muted
suppressWarnings(suppressMessages(library(DESeq2))) # For normalization
suppressWarnings(suppressMessages(library(FSA))) # For standard error
suppressWarnings(suppressMessages(library(mctoolsr))) # For taxonomic analysis
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel graphs
suppressWarnings(suppressMessages(library(plotly))) # For interactive graphs
suppressWarnings(suppressMessages(library(RColorBrewer))) # For color palettes
suppressWarnings(suppressMessages(library(dendextend))) # For dendrogram plots
suppressWarnings(suppressMessages(library(viridis))) # For viridis palette
suppressWarnings(suppressMessages(library(gplots))) # For heatmaps
suppressWarnings(suppressMessages(library(maps))) # For geographic maps
suppressWarnings(suppressMessages(library(mapproj))) # For geographic maps
suppressWarnings(suppressMessages(library(magrittr))) # For setting column names
suppressWarnings(suppressMessages(library(writexl))) # For writing Excel file
suppressWarnings(suppressMessages(library(plotrix))) # For standard error
suppressWarnings(suppressMessages(library(emmeans))) # For Tukey
suppressWarnings(suppressMessages(library(multcomp))) # For Tukey
suppressWarnings(suppressMessages(library(RCurl))) # For KEGG
suppressWarnings(suppressMessages(library(KEGGREST))) # For KEGG
suppressWarnings(suppressMessages(library(multcompView))) # For significance letters
suppressWarnings(suppressMessages(library(rcompanion))) # For significance letters
suppressWarnings(suppressMessages(library(pheatmap))) # For heatmaps
suppressWarnings(suppressMessages(library(qvalue))) # For qvalue
BiocManager::install("qvalue")
suppressWarnings(suppressMessages(library(qvalue))) # For qvalue
#### _Setup ####
# Import with mctoolsr (matches sampleIDs, 1141 samples)
tax_table_fp <- file.path("genus_table_mctoolsr_updated.txt")
map_fp <- file.path("metadata_updated.txt")
input = load_taxa_table(tax_table_fp, map_fp)
new_tab <- read_excel("Extremophilic_fungi_dataset_final.xlsx", sheet = 1) %>%
mutate(Location2 = Geographic.Location) %>%
dplyr::select(taxon_oid, Study.Name2, Location2, Environment)
table(new_tab$Environment)
# Working directory (GitHub repository)
setwd("~/Documents/GitHub/Extremophilic_Fungi/")
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
`%notin%` <- Negate(`%in%`)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 5) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
source("plot_multipatt.R")
#### _Setup ####
# Import with mctoolsr (matches sampleIDs, 1141 samples)
tax_table_fp <- file.path("genus_table_mctoolsr_updated.txt")
map_fp <- file.path("metadata_updated.txt")
input = load_taxa_table(tax_table_fp, map_fp)
new_tab <- read_excel("Extremophilic_fungi_dataset_final.xlsx", sheet = 1) %>%
mutate(Location2 = Geographic.Location) %>%
dplyr::select(taxon_oid, Study.Name2, Location2, Environment)
table(new_tab$Environment)
# Update map_loaded - sampleID, GenomeSize, Environment, Assembly Method, Year
# Filter out samples from before 2012. 1116 remaining
dim(input$map_loaded)
input$map_loaded <- input$map_loaded %>%
mutate(sampleID = paste("X", taxon_oid, sep = ""),
GenomeSize = `Genome Size   * assembled`) %>%
left_join(., new_tab, by = "taxon_oid") %>%
separate(`Add Date`, into = c("Day", "Month", "Year"), sep = "/", remove = F) %>%
mutate(Year = as.integer(Year)) %>%
filter(Year > 11) %>%
mutate(sampleID2 = sampleID) %>%
column_to_rownames(var = "sampleID2")
dim(input$map_loaded)
for (i in 1:nrow(input$map_loaded)) {
if (input$map_loaded$`Assembly Method`[1] == "") {
input$map_loaded$`Assembly Method`[i] <- "Unknown"
}
if (input$map_loaded$`Sequencing Method`[i] == "") {
input$map_loaded$`Sequencing Method`[i] <- "Unknown"
}
}
input$map_loaded <- input$map_loaded %>%
mutate_if(is.character, as.factor)
# Filter out samples with no genus level reads (removes 7 samples, 1109 remaining)
# Note: This filters 5 unassembled samples, taxonoids 3300002080-84
count <- as.data.frame(sort(colSums(input$data_loaded))) %>%
filter(`sort(colSums(input$data_loaded))` == 0)
input <- filter_data(input,
filter_cat = "sampleID",
filter_vals = rownames(count))
# Filter out non-Illumina datasets (removes 71 samples. 1038 remaining)
table(input$map_loaded$`Sequencing Method`)
input <- filter_data(input,
filter_cat = "Sequencing Method",
filter_vals = c("454", "454 GS FLX", "454 GS FLX Titanium",
"454 GS FLX Titanium, Illumina GAIIx",
"454 GS FLX Titanium, Illumina HiSeq 2000",
"Illumina HiSeq 2000, 454 GS FLX Titanium"))
# Filter by Assembly method? For now now. Also many unknowns...
table(input$map_loaded$`Assembly Method`)
# Check sequencing depth
sort(colSums(input$data_loaded))
mean(colSums(input$data_loaded)) # 352691.7
se(colSums(input$data_loaded)) # 17049.82
input$map_loaded$count <- colSums(input$data_loaded)
ggplot(input$map_loaded, aes(reorder(`Environment`, count, mean), count)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1.5, alpha = 0.25, width = 0.25) +
labs(x = "Environment",
y = "# Reads") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
#### __Filter ####
# Now filter to euk and then fungi (extract fungal phyla)
input_euk <- filter_taxa_from_input(input,
taxa_to_keep = "Eukaryota",
at_spec_level = 1)
# Check phyla
table(input_euk$taxonomy_loaded$taxonomy2)
# List of RefSeq fungal phyla
fungal_phyla_names <- c("Ascomycota", "Basidiomycota", "Blastocladiomycota",
"Chytridiomycota","Cryptomycota", "Microsporidia",
"Mucoromycota", "Nephridiophagidae", "Olpidiomycota",
"Sanchytriomycota", "Zoopagomycota")
input_fungi <- filter_taxa_from_input(input_euk,
taxa_to_keep = fungal_phyla_names,
at_spec_level = 2)
# Filter out plasmids (2 removed)
input_fungi <- filter_taxa_from_input(input_fungi,
taxa_to_remove = "Plasmid:Eukaryota",
at_spec_level = 1)
nrow(input$taxonomy_loaded) # 4038 total
nrow(input_euk$taxonomy_loaded) # 400 euks
nrow(input_fungi$taxonomy_loaded) # 304 fungi
# Now check reads again
sort(colSums(input_fungi$data_loaded))
# Note lots of samples with 0 or very few fungi
# Purposefully not filtering those out those as 0's are interesting in this analysis
# These are extreme environments, some may have few to no fungi
# Further below, however, some analyses will be done with zeroes removed
mean(colSums(input_fungi$data_loaded)) # 538.5231
se(colSums(input_fungi$data_loaded)) # 53.2774
input_fungi$map_loaded$fung_count <- colSums(input_fungi$data_loaded)
input_fungi$map_loaded$present <- ifelse(input_fungi$map_loaded$fung_count > 0,
1,
0)
# Get and plot fraction of samples with 0 versus > 0 fungal reads, and also n
env_prev <- input_fungi$map_loaded %>%
group_by(Environment) %>%
summarise(num_present = sum(present),
num_samples = n(),
prevalence = round(num_present/num_samples * 100, digits = 2)) %>%
mutate(num_absent = num_samples - num_present)
sum(env_prev$num_samples)
sum(env_prev$num_present)
# Melt for stacked bar
env_prev_long <- melt(env_prev,
id.vars = "Environment",
measure.vars = c("num_present", "num_absent"))
#### _CPM ####
input_fungi_CPM <- input_fungi
# Replace counts in "data_loaded" with CPM transformed counts
# This is CPM assembled metagenomic reads
# Do (count*1000000)/GenomeSize
# i is samples 1 to 1142
# j is taxa 1 to 304
for (i in 1:ncol(input_fungi$data_loaded)) {
for (j in 1:nrow(input_fungi$data_loaded)) {
input_fungi_CPM$data_loaded[j, i] <- (input_fungi$data_loaded[j, i]*1000000)/input_fungi$map_loaded$GenomeSize[i]
}
}
# Year
input_fungi_CPM_nz$map_loaded$Year <- as.factor(as.character(input_fungi_CPM_nz$map_loaded$Year))
#### _Relative ####
# Remove zeroes (174 removed, 864 remaining)
countFun <- as.data.frame(sort(colSums(input_fungi_CPM$data_loaded))) %>%
filter(`sort(colSums(input_fungi_CPM$data_loaded))` == 0)
input_fungi_nz <- filter_data(input_fungi,
filter_cat = "sampleID",
filter_vals = rownames(countFun))
# Year
input_fungi_CPM_nz$map_loaded$Year <- as.factor(as.character(input_fungi_CPM_nz$map_loaded$Year))
# Filter out fungal zeroes from CPM data (filters 188 samples, 921 remaining)
input_fungi_CPM_nz <- filter_data(input_fungi_CPM,
filter_cat = "sampleID",
filter_vals = rownames(countFun))
# Year
input_fungi_CPM_nz$map_loaded$Year <- as.factor(as.character(input_fungi_CPM_nz$map_loaded$Year))
table(input_fungi_CPM_nz$map_loaded$Year)
# Assembly method
# Need to make new column for method type or multiple or unknown
table(input_fungi_CPM_nz$map_loaded$`Assembly Method`)
input_fungi_CPM_nz$map_loaded$Assembler <- dplyr::recode_factor(input_fungi_CPM_nz$map_loaded$`Assembly Method`,
"AbySS v1.5.0" = "AbySS",
"canu v. 1.7" = "Canu",
"canu v. 1.9" = "Canu",
"Celera WGS Assembler v5.3" = "Celera",
"Celera, Phrap" = "Multiple",
"CLC Bio package" = "CLC",
"CLC Genomics" = "CLC",
"CLC genomics wb7" = "CLC",
"CLC genomics workbench" = "CLC",
"CLC genomics workbench, v. 7.0" = "CLC",
"Custom JGI assembly, Nielsen et. al." = "Custom JGI",
"Custom JGI assembly." = "Custom JGI",
"IDBA" = "IDBA",
"IDBA 1.1.1 PRE correction" = "IDBA",
"idba v. 1.1.1" = "IDBA",
"IDBA v. 1.1.1" = "IDBA",
"IDBA_1.1.1 PRE_correction" = "IDBA",
"IDBA_UD" = "IDBA_UD",
"idba_ud 1.1.1" = "IDBA_UD",
"IDBA_UD k52-k92 step10" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs greater than or equal to 1kb and less than 4kb" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs greater than or equal to 4kb" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs less than 1kb" = "IDBA_UD",
"idba_ud v 1.1.1" = "IDBA_UD",
"idba_ud v. 1.1.1" = "IDBA_UD",
"IDBA_UD v. 1.1.1" = "IDBA_UD",
"IDBA-UD" = "IDBA_UD",
"IDBA-UD 1.1.3" = "IDBA_UD",
"IDBA-ud v. 1.1.1" = "IDBA_UD",
"IDBA-UD v. 1.1.1" = "IDBA_UD",
"idba.1.1.1" = "IDBA",
"lucy / pga" = "Multiple",
"Megahit" = "MEGAHIT",
"MEGAHit" = "MEGAHIT",
"MegaHit v. 1.02" = "MEGAHIT",
"MEGAHIT v. 1.1.1" = "MEGAHIT",
"megahit v. 1.1.3" = "MEGAHIT",
"Megahit v. 1.1.3" = "MEGAHIT",
"MegaHIT v. 1.2.9" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v0.2.0" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v1.0.3" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v1.0.6" = "MEGAHIT",
"MEGAHIT v.1.0.3" = "MEGAHIT",
"MEGAN" = "MEGAN",
"metaSPAdes" = "metaSPAdes",
"metaSPAdes v. 3.10.0" = "metaSPAdes",
"metaspades v. 3.13.0" = "metaSPAdes",
"metaspades v. 3.14.1" = "metaSPAdes",
"metaSPAdes v. 3.7.1" = "metaSPAdes",
"metaSPAdes v3.10, CLC genomic workbench v7.5.1" = "metaSPAdes",
"metaSPAdes v3.10.1" = "metaSPAdes",
"Metavelvet" = "MetaVelvet",
"MetaVelvet - v1.2.01" = "MetaVelvet",
"MetaVelvet 1.2.02" = "MetaVelvet",
"metavelvet v. 1.2.02" = "MetaVelvet",
"Metavelvet v. 1.2.02" = "MetaVelvet",
"mira 3.0.4" = "MIRA",
"MIRA 4.9.5_2" = "MIRA",
"Newbler" = "Newbler",
"Newbler and/or Velvet" = "Multiple",
"Newbler v. 2.5" = "Newbler",
"Newbler v. 2.5.3" = "Newbler",
"Newbler v2.7" = "Newbler",
"pga" = "PGA",
"Ray 2.3.1" = "Ray",
"Ray 2.3.1 (no min length)" = "Ray",
"reassembled with IDBA_UD" = "IDBA_UD",
"reassembly by IDBA-UD" = "IDBA_UD",
"reassembly with IDBA_UD" = "IDBA_UD",
"reassembly with IDBA-UD" = "IDBA_UD",
"SAPDES" = "SPAdes",
"Soap denovo and minimus" = "Multiple",
"SOAPdenovo v2.04" = "SOAPdenovo",
"SOAPdenovo,newbler,minimus2 v. Version 1.05: testing... 2010,(v2.8 (20120726_1306)),AMOS/3.1.0" = "SOAPdenovo",
"Spades" = "SPAdes",
"SPADES" = "SPAdes",
"spades 3.0" = "SPAdes",
"Spades 3.6.1" = "SPAdes",
"SPAdes 3.7.1" = "SPAdes",
"SPAdes 3.8.0" = "SPAdes",
"Spades v. 3.10" = "SPAdes",
"SPAdes v. 3.11.0" = "SPAdes",
"spades v. 3.11.1" = "SPAdes",
"Spades v. 3.11.1" = "SPAdes",
"SPAdes v. 3.11.1" = "SPAdes",
"spades v. 3.12.0" = "SPAdes",
"Spades v. 3.12.0" = "SPAdes",
"spades v. 3.13.0" = "SPAdes",
"SPades v. 3.13.0" = "SPAdes",
"SPAdes v. 3.6.0" = "SPAdes",
"SPAdes v. 3.9.0" = "SPAdes",
"spades v. SPAdes version: 3.10.1" = "SPAdes",
"spades v. SPAdes version: 3.11.1-check" = "SPAdes",
"SPADES v3.6.1" = "SPAdes",
"Spades_3.6" = "SPAdes",
"SPAdes3.1.0" = "SPAdes",
"Unknown" = "Unknown",
"Unkown" = "Unknown",
"Velvet" = "Velvet",
"Velvet + MetaVelvet at multiple Kmers" = "Multiple",
"Velvet + MetaVelvet at multiple Kmers followed by Minimus2 on all assemblies" = "Multiple",
"Velvet, MetaVelvet, Minimus" = "Multiple")
# Get these columns and sample ID to add to any metadata
methods <- input_fungi_CPM_nz$map_loaded %>%
dplyr::select(sampleID, Year, Assembler)
# Plot year and assembler numbers
year_df <- as.data.frame(table(input_fungi_CPM_nz$map_loaded$Year))
assem_df <- as.data.frame(table(input_fungi_CPM_nz$map_loaded$Assembler))
#### _Alpha ####
# Look at number of different taxa levels by environments
# OTU Richness
input_fungi$map_loaded$rich <- specnumber(input_fungi$data_loaded,
MARGIN = 2)
# Shannon diversity
input_fungi$map_loaded$shannon <- diversity(input_fungi$data_loaded,
index = "shannon",
MARGIN = 2)
# Run a for loop to read in the file for each metagenome and combine into 1
setwd("FungalKOs/")
list.files()
ko <- list()
ko_input <- data.frame(V1 = "NA",
V2 = "NA",
V3 = "NA")
ko_table <- ko_input
for (i in 1:length(list.files())) {
ko[[i]] <- read.delim(list.files()[i], header = F)
ko_table <- ko_table %>%
rbind(ko[[i]])
}
setwd("~/Documents/GitHub/Extremophilic_Fungi/")
# Add new desert samples
new_kos <- read.table("fungi.ko.txt")
ko_table <- rbind(ko_table, new_kos)
# Clean up table
ko_table_wTax <- ko_table %>%
filter(V1 != "NA") %>%
separate(V1, into = c("Junk", "KO"), sep = ":") %>%
dplyr::select(-Junk, -V2) %>%
mutate(taxon_oid = substring(V3, first = 1, last = 10)) %>%
separate(V3, into = c("Junk", "taxonomy"), sep = "Eukaryota;") %>%
dplyr::select(-Junk) %>%
separate(taxonomy,
into = c("Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
dplyr::select(taxon_oid, KO, everything())
# KO count (abundance) by metagenome
ko_table_MGcount <- ko_table_wTax %>%
dplyr::select(taxon_oid, KO) %>%
group_by(taxon_oid, KO) %>%
summarise(KO_abund = n()) %>%
pivot_wider(id_cols = KO, names_from = taxon_oid, values_from = KO_abund) %>%
column_to_rownames(var = "KO")
ko_table_MGcount[is.na(ko_table_MGcount) == TRUE] <- 0
# List of KOs sorted by overall abundance
ko_list <- ko_table %>%
filter(V1 != "NA") %>%
dplyr::select(V1) %>%
group_by(V1) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
mutate(Definition = "NA") %>%
separate(V1, into = c("Junk", "KO"), sep = ":", remove = F) %>%
dplyr::select(-Junk)
# Add definitions to list for only new KOs and append to old list
old_ko_list <- read.csv("KOlist_wDefinitions.csv")
new_ko_list <- ko_list %>%
filter(KO %notin% old_ko_list$KO)
#for (i in 1:nrow(new_ko_list)) {
#  def <- keggFind(database = "ko", query = new_ko_list$KO[i])
#  if (length(def) != 0) {
#    new_ko_list$Definition[i] <- def
#  }
#}
#write.csv(new_ko_list, file = "KOlist_wDefinitions_new.csv", row.names = F)
new_ko_list <- read.csv("KOlist_wDefinitions_new.csv")
ko_list <- rbind(old_ko_list, new_ko_list)
ko_list$KO_def <- paste(ko_list$KO, ko_list$Definition, sep = " ")
# Make community style table and metadata, match IDs
ko_comm <- ko_table_MGcount %>%
t() %>%
as.data.frame() %>%
filter(rownames(.) %in% input_fungi$map_loaded$taxon_oid) %>%
arrange(rownames(.))
ko_meta <- input_fungi$map_loaded %>%
filter(taxon_oid %in% rownames(ko_comm)) %>%
arrange(taxon_oid) %>%
left_join(., methods, by = "sampleID") %>%
mutate(rn = sampleID) %>%
column_to_rownames(var = "rn")
# Check match (should be zero)
sum(rownames(ko_comm) != ko_meta$taxon_oid)
# Check environment sample size
table(ko_meta$Environment)
nrow(ko_meta) # 802
# Get richness and Shannon
ko_meta$richness_KO = specnumber(ko_comm)
ko_meta$shannon_KO = diversity(ko_comm, index = "shannon")
range(ko_meta$richness_KO)
range(ko_meta$shannon_KO)
ggplot(ko_meta, aes(rich, richness_KO)) +
geom_point(size = 1.5, alpha = 0.25, aes(colour = Environment)) +
geom_smooth() +
labs(x = "Fungal genus richness",
y = "Fungal KO richness") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10))
# Save ko_meta
saveRDS(ko_meta, "ko_meta.rds")
#### _Start here ####
ko_comm_DESeq <- readRDS("ko_comm_DESeq_updated.rds")
ko_meta <- readRDS("ko_meta.rds")
#### _KO Alpha ####
leveneTest(richness_KO ~ Environment, data = ko_meta) # Bad
