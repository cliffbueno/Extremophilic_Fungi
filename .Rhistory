legend.title = element_text(size = 10),
legend.key.height = unit(0.5,"cm"),
legend.key.width = unit(1, "cm"),
legend.text = element_text(size = 7)) +
guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5)) +
coord_flip()
input_fungi_CPM.hm
# Get legend
input_fungi_CPM.l <- get_legend(input_fungi_CPM.hm)
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position="none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0))),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = "Group")
input_fungi_CPM.hm.clean
View(mp_phyla_results)
input_fungi_CPM.hm.melted <- mp_phyla_corrs %>%
melt(., id.vars = c("taxon"))
input_fungi_CPM.hm <- ggplot(data = input_fungi_CPM.hm.melted,
aes(x = factor(taxon), y = variable, fill = value)) +
geom_tile() +
scale_fill_distiller(name = "Indicator correlation index",
palette = "RdBu", direction = -1,
na.value = "transparent",
type = "div",
limits = c(-1, 1)) +
scale_x_discrete(breaks = unique(input_fungi_CPM.hm.melted$taxon),
labels = unique(input_fungi_CPM.hm.melted$taxon),
limits = rev(levels(input_fungi_CPM.hm.melted$taxon))) +
scale_y_discrete(position = "right") +
theme_minimal() +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 10),
legend.key.height = unit(0.5,"cm"),
legend.key.width = unit(1, "cm"),
legend.text = element_text(size = 7)) +
guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5)) +
coord_flip()
# Get legend
input_fungi_CPM.l <- get_legend(input_fungi_CPM.hm)
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position="none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0))),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = "Group")
input_fungi_CPM.hm.clean
input_fungi_CPM.hm
view(tax_sum_phyla)
# Add abundances to dataframe
mean_CPM <- data.frame("CPM" = rowSums(tax_sum_phyla)/nrow(input_fungi_CPM$map_loaded))
View(mean_CPM)
Group = "Environment"
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position="none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0))),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
input_fungi_CPM.hm.clean
# Add abundances to dataframe
mean_CPM <- data.frame("CPM" = rowSums(tax_sum_phyla)/nrow(input_fungi_CPM$map_loaded),
"taxon" = rownames(tax_sum_phyla))
mp_phyla_results <- mp_phyla_results %>%
left_join(., mean_CPM, by = "taxon")
View(mp_phyla_results)
# Abundance plot
input_fungi_CPM.bp.y <- ggplot(data = mp_phyla_results, aes(x = taxon, y = RelAbundance)) +
geom_bar(stat = "identity", fill = "grey") +
scale_y_continuous(position = "right") +
scale_x_discrete(limits = rev(levels(mp_phyla_results$taxon))) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none", plot.margin = margin(c(0,5,0,-5)),
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)))) +
labs(y = "Mean CPM")
input_fungi_CPM.bp.y
# Abundance plot
input_fungi_CPM.bp.y <- ggplot(data = mp_phyla_results, aes(x = taxon, y = CPM)) +
geom_bar(stat = "identity", fill = "grey") +
scale_y_continuous(position = "right") +
scale_x_discrete(limits = rev(levels(mp_phyla_results$taxon))) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none", plot.margin = margin(c(0,5,0,-5)),
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)))) +
labs(y = "Mean CPM")
input_fungi_CPM.bp.y
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2, rel_widths = c(0.7, 0.3))
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5, units = "in", res = 300)
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_grid(top, input_fungi_CPM.l, nrow = 2, rel_heights = c(0.87, 0.13))
dev.off()
input_fungi_CPM.hm.clean
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5, angle = 45, hjust = 1),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position="none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0))),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
input_fungi_CPM.hm.clean
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)),
angle = 45, hjust = 1),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
input_fungi_CPM.hm.clean
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)),
angle = 45, vjust = 1),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
input_fungi_CPM.hm.clean
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)),
angle = 45, vjust = 0),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
input_fungi_CPM.hm.clean
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)),
angle = 45, hjust = 0),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
input_fungi_CPM.hm.clean
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2, rel_widths = c(0.7, 0.3))
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_grid(top, input_fungi_CPM.l, nrow = 2, rel_heights = c(0.87, 0.13))
dev.off()
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2, rel_widths = c(0.7, 0.3),
align = "hv", axis = "b")
top
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2, rel_widths = c(0.7, 0.3),
align = "v")
top
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2, rel_widths = c(0.7, 0.3),
align = "h")
top
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_grid(top, input_fungi_CPM.l, nrow = 2, rel_heights = c(0.87, 0.13))
dev.off()
input_fungi_CPM.bp.y
# Abundance plot
input_fungi_CPM.bp.y <- ggplot(data = mp_phyla_results, aes(x = taxon, y = CPM)) +
geom_bar(stat = "identity", fill = "grey") +
scale_y_continuous(position = "right") +
scale_x_discrete(limits = rev(levels(mp_phyla_results$taxon))) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.margin = margin(c(0,5,0,0)),
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)))) +
labs(y = "Mean CPM")
input_fungi_CPM.bp.y
# Abundance plot
input_fungi_CPM.bp.y <- ggplot(data = mp_phyla_results, aes(x = taxon, y = CPM)) +
geom_bar(stat = "identity", fill = "grey") +
scale_y_continuous(position = "right") +
scale_x_discrete(limits = rev(levels(mp_phyla_results$taxon))) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.margin = margin(c(0,0,0,0)),
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)))) +
labs(y = "Mean CPM")
input_fungi_CPM.bp.y
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2,
rel_widths = c(0.7, 0.3), align = "h")
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_grid(top, input_fungi_CPM.l, nrow = 2, rel_heights = c(0.87, 0.13))
dev.off()
# Abundance plot
input_fungi_CPM.bp.y <- ggplot(data = mp_phyla_results, aes(x = taxon, y = CPM)) +
geom_bar(stat = "identity", fill = "grey") +
scale_y_continuous(position = "right") +
scale_x_discrete(limits = rev(levels(mp_phyla_results$taxon))) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.margin = margin(c(0,5,0,0)),
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)))) +
labs(y = "Mean CPM")
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2,
rel_widths = c(0.7, 0.3), align = "h")
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_grid(top, input_fungi_CPM.l, nrow = 2, rel_heights = c(0.87, 0.13))
dev.off()
input_fungi_CPM.hm <- ggplot(data = input_fungi_CPM.hm.melted,
aes(x = factor(taxon), y = variable, fill = value)) +
geom_tile() +
scale_fill_distiller(name = "Indicator correlation index",
palette = "RdBu", direction = -1,
na.value = "transparent",
type = "div",
limits = c(-1, 1)) +
scale_x_discrete(breaks = unique(input_fungi_CPM.hm.melted$taxon),
labels = unique(input_fungi_CPM.hm.melted$taxon),
limits = rev(levels(input_fungi_CPM.hm.melted$taxon))) +
scale_y_discrete(position = "right") +
theme_minimal() +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 8),
legend.key.height = unit(0.4,"cm"),
legend.key.width = unit(8, "cm"),
legend.text = element_text(size = 6)) +
guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5)) +
coord_flip()
# Get legend
input_fungi_CPM.l <- get_legend(input_fungi_CPM.hm)
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)),
angle = 45, hjust = 0),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
# Abundance plot
input_fungi_CPM.bp.y <- ggplot(data = mp_phyla_results, aes(x = taxon, y = CPM)) +
geom_bar(stat = "identity", fill = "grey") +
scale_y_continuous(position = "right") +
scale_x_discrete(limits = rev(levels(mp_phyla_results$taxon))) +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.margin = margin(c(0,5,0,0)),
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)))) +
labs(y = "Mean CPM")
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2,
rel_widths = c(0.7, 0.3), align = "h")
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_grid(top, input_fungi_CPM.l, nrow = 2, rel_heights = c(0.87, 0.13))
dev.off()
input_fungi_CPM.hm <- ggplot(data = input_fungi_CPM.hm.melted,
aes(x = factor(taxon), y = variable, fill = value)) +
geom_tile() +
scale_fill_distiller(name = "Indicator correlation index",
palette = "RdBu", direction = -1,
na.value = "transparent",
type = "div",
limits = c(-1, 1)) +
scale_x_discrete(breaks = unique(input_fungi_CPM.hm.melted$taxon),
labels = unique(input_fungi_CPM.hm.melted$taxon),
limits = rev(levels(input_fungi_CPM.hm.melted$taxon))) +
scale_y_discrete(position = "right") +
theme_minimal() +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_text(size = 8),
legend.key.height = unit(0.4,"cm"),
legend.key.width = unit(0.8, "cm"),
legend.text = element_text(size = 6)) +
guides(fill = guide_colorbar(title.position = "top", title.hjust = 0.5)) +
coord_flip()
# Get legend
input_fungi_CPM.l <- get_legend(input_fungi_CPM.hm)
# Clean
input_fungi_CPM.hm.clean <- input_fungi_CPM.hm +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(margin = margin(c(0,-5,0,0)), size = 5),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.text.x.top = element_text(size = 6, margin = margin(c(0,0,-2,0)),
angle = 45, hjust = 0),
plot.margin = margin(c(0,-2,0,5))) +
labs(y = Group)
top <- plot_grid(input_fungi_CPM.hm.clean, input_fungi_CPM.bp.y, ncol = 2,
rel_widths = c(0.7, 0.3), align = "h")
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_grid(top, input_fungi_CPM.l, nrow = 2, rel_heights = c(0.87, 0.13))
dev.off()
source("plot_multipatt.R")
plot_multipatt(mp_obj = mp_phyla,
input = input_fungi_CPM,
tax_sum = tax_sum_phyla,
group = "Environment")
plot_multipatt(mp_obj = mp_class,
input = input_fungi_CPM,
tax_sum = tax_sum_class,
group = "Environment")
plot_multipatt(mp_obj = mp_order,
input = input_fungi_CPM,
tax_sum = tax_sum_order,
group = "Environment")
plot_multipatt(mp_obj = mp_family,
input = input_fungi_CPM,
tax_sum = tax_sum_family,
group = "Environment")
plot_multipatt(mp_obj = mp_genus,
input = input_fungi_CPM,
tax_sum = tax_sum_genus,
group = "Environment")
# Genus
tax_sum_genus <- summarize_taxonomy(input_fungi_CPM, level = 6, report_higher_tax = F, relative = F)
set.seed(425)
mp_genus <- multipatt(t(input_fungi_CPM$data_loaded),
input_fungi_CPM$map_loaded$Environment,
func = "r.g",
control = how(nperm=999))
summary(mp_genus) # Acid mine 8, cyrosphere 44, desert 7, glacial forefield 1, hot spring 2, soda lake 112
plot_multipatt(mp_obj = mp_genus,
input = input_fungi_CPM,
tax_sum = tax_sum_genus,
group = "Environment")
View(mp_phyla_corrs)
View(mp_phyla_results)
source("plot_multipatt.R")
plot_multipatt(mp_obj = mp_order,
input = input_fungi_CPM,
tax_sum = tax_sum_order,
group = "Environment")
pdf("FigsUpdated/mp_Class", width = 5, height = 5)
plot_multipatt(mp_obj = mp_class,
input = input_fungi_CPM,
tax_sum = tax_sum_class,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Order", width = 5, height = 5)
plot_multipatt(mp_obj = mp_order,
input = input_fungi_CPM,
tax_sum = tax_sum_order,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Phyla", width = 5, height = 7)
plot_multipatt(mp_obj = mp_family,
input = input_fungi_CPM,
tax_sum = tax_sum_family,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Family", width = 5, height = 7)
plot_multipatt(mp_obj = mp_family,
input = input_fungi_CPM,
tax_sum = tax_sum_family,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Phyla", width = 5, height = 5)
plot_multipatt(mp_obj = mp_phyla,
input = input_fungi_CPM,
tax_sum = tax_sum_phyla,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Genus", width = 5, height = 10)
plot_multipatt(mp_obj = mp_genus,
input = input_fungi_CPM,
tax_sum = tax_sum_genus,
group = "Environment")
dev.off()
source("plot_multipatt.R")
pdf("FigsUpdated/mp_Phyla.pdf", width = 5, height = 5)
plot_multipatt(mp_obj = mp_phyla,
input = input_fungi_CPM,
tax_sum = tax_sum_phyla,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Class.pdf", width = 5, height = 5)
plot_multipatt(mp_obj = mp_class,
input = input_fungi_CPM,
tax_sum = tax_sum_class,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Order.pdf", width = 5, height = 7)
plot_multipatt(mp_obj = mp_order,
input = input_fungi_CPM,
tax_sum = tax_sum_order,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Family.pdf", width = 5, height = 10)
plot_multipatt(mp_obj = mp_family,
input = input_fungi_CPM,
tax_sum = tax_sum_family,
group = "Environment")
dev.off()
pdf("FigsUpdated/mp_Genus.pdf", width = 5, height = 12)
plot_multipatt(mp_obj = mp_genus,
input = input_fungi_CPM,
tax_sum = tax_sum_genus,
group = "Environment")
dev.off()
suppressWarnings(suppressMessages(library(readxl))) # For read_xlsx
suppressWarnings(suppressMessages(library(janitor))) # For cleaning
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plyr))) # For data manipulation
suppressWarnings(suppressMessages(library(tidyverse))) # For data manipulation
suppressWarnings(suppressMessages(library(reshape2))) # For melting
suppressWarnings(suppressMessages(library(vegan))) # For analysis
suppressWarnings(suppressMessages(library(car))) # For leveneTest
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc test
suppressWarnings(suppressMessages(library(indicspecies))) # For multipatt
suppressWarnings(suppressMessages(library(scales))) # For muted
suppressWarnings(suppressMessages(library(DESeq2))) # For normalization
suppressWarnings(suppressMessages(library(FSA))) # For standard error
suppressWarnings(suppressMessages(library(mctoolsr))) # For taxonomic analysis
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel graphs
suppressWarnings(suppressMessages(library(plotly))) # For interactive graphs
suppressWarnings(suppressMessages(library(RColorBrewer))) # For color palettes
suppressWarnings(suppressMessages(library(dendextend))) # For dendrogram plots
suppressWarnings(suppressMessages(library(viridis))) # For viridis palette
suppressWarnings(suppressMessages(library(gplots))) # For heatmaps
suppressWarnings(suppressMessages(library(maps))) # For geographic maps
suppressWarnings(suppressMessages(library(mapproj))) # For geographic maps
suppressWarnings(suppressMessages(library(magrittr))) # For setting column names
suppressWarnings(suppressMessages(library(writexl))) # For writing Excel file
suppressWarnings(suppressMessages(library(plotrix))) # For standard error
suppressWarnings(suppressMessages(library(emmeans))) # For Tukey
suppressWarnings(suppressMessages(library(multcomp))) # For Tukey
suppressWarnings(suppressMessages(library(RCurl))) # For KEGG
suppressWarnings(suppressMessages(library(KEGGREST))) # For KEGG
suppressWarnings(suppressMessages(library(multcompView))) # For significance letters
suppressWarnings(suppressMessages(library(rcompanion))) # For significance letters
suppressWarnings(suppressMessages(library(pheatmap))) # For heatmaps
suppressWarnings(suppressMessages(library(qvalue))) # For qvalue
# Working directory (GitHub repository)
setwd("~/Documents/GitHub/Extremophilic_Fungi/")
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
`%notin%` <- Negate(`%in%`)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 5) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
source("plot_multipatt.R")
#### _Setup ####
# Import with mctoolsr (matches sampleIDs, 1141 samples)
tax_table_fp <- file.path("genus_table_mctoolsr_updated.txt")
map_fp <- file.path("metadata_updated.txt")
input = load_taxa_table(tax_table_fp, map_fp)
new_tab <- read_excel("Extremophilic_fungi_dataset_final.xlsx", sheet = 1) %>%
dplyr::select(taxon_oid, Environment)
table(new_tab)
table(new_tab$Environment)
