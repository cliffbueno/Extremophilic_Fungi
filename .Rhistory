suppressWarnings(suppressMessages(library(readxl))) # For read_xlsx
suppressWarnings(suppressMessages(library(janitor))) # For cleaning
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plyr))) # For data manipulation
suppressWarnings(suppressMessages(library(tidyverse))) # For data manipulation
suppressWarnings(suppressMessages(library(reshape2))) # For melting
suppressWarnings(suppressMessages(library(vegan))) # For analysis
suppressWarnings(suppressMessages(library(car))) # For leveneTest
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc test
suppressWarnings(suppressMessages(library(indicspecies))) # For multipatt
suppressWarnings(suppressMessages(library(scales))) # For muted
suppressWarnings(suppressMessages(library(DESeq2))) # For normalization
suppressWarnings(suppressMessages(library(FSA))) # For standard error
suppressWarnings(suppressMessages(library(mctoolsr))) # For taxonomic analysis
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel graphs
suppressWarnings(suppressMessages(library(plotly))) # For interactive graphs
suppressWarnings(suppressMessages(library(RColorBrewer))) # For color palettes
suppressWarnings(suppressMessages(library(dendextend))) # For dendrogram plots
suppressWarnings(suppressMessages(library(viridis))) # For viridis palette
suppressWarnings(suppressMessages(library(gplots))) # For heatmaps
suppressWarnings(suppressMessages(library(maps))) # For geographic maps
suppressWarnings(suppressMessages(library(mapproj))) # For geographic maps
suppressWarnings(suppressMessages(library(magrittr))) # For setting column names
suppressWarnings(suppressMessages(library(writexl))) # For writing Excel file
suppressWarnings(suppressMessages(library(plotrix))) # For standard error
suppressWarnings(suppressMessages(library(emmeans))) # For Tukey
suppressWarnings(suppressMessages(library(multcomp))) # For Tukey
suppressWarnings(suppressMessages(library(RCurl))) # For KEGG
suppressWarnings(suppressMessages(library(KEGGREST))) # For KEGG
suppressWarnings(suppressMessages(library(multcompView))) # For significance letters
suppressWarnings(suppressMessages(library(rcompanion))) # For significance letters
suppressWarnings(suppressMessages(library(pheatmap))) # For heatmaps
suppressWarnings(suppressMessages(library(qvalue))) # For qvalue
suppressWarnings(suppressMessages(library(writexl))) # For writing to Excel
suppressWarnings(suppressMessages(library(ggpubr))) # For density plots
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc
suppressWarnings(suppressMessages(library(DirichletReg))) # For analyzing proportions
suppressWarnings(suppressMessages(library(MASS))) # For zinf reg
suppressWarnings(suppressMessages(library(pscl))) # For zinf reg
suppressWarnings(suppressMessages(library(boot))) # For zinf reg
suppressWarnings(suppressMessages(library(gamlss))) # For zinf reg
suppressWarnings(suppressMessages(library(writexl))) # Write Excel spreadsheets
# Working directory (GitHub repository)
setwd("~/Documents/GitHub/Extremophilic_Fungi/")
# Note directory is organized into folders for code and data
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
`%notin%` <- Negate(`%in%`)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 5) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
source("code/plot_multipatt.R")
source("code/compareBC.R")
# Custom color palette from Benjamin Young
color_mapping <- c(
"Acid mine drainage" = "darkorange",
"Cryosphere - soil" = "lightskyblue3",
"Cryosphere - water" = "royalblue",
"Desert" = "burlywood2",
"Glacial forefield" = "grey70",
"Hot spring" = "red",
"Hydrothermal vent" = "firebrick4",
"Hypersaline" = "plum2",
"Soda lake" = "magenta3"
)
#### _Start Here ####
tax_table_fp <- file.path("data/genus_table_mctoolsr_final.txt")
map_fp <- file.path("data/metadata_final_use.txt")
input = load_taxa_table(tax_table_fp, map_fp) # 932
new_tab <- read_excel("data/Extremophilic_fungi_dataset_final.xlsx", sheet = 1) %>%
mutate(Location2 = Geographic.Location) %>%
dplyr::select(taxon_oid, Study.Name2, Location2, Environment)
table(new_tab$Environment)
# Update map_loaded - sampleID, GenomeSize, Environment, Assembly Method, Year
# Filter out samples from before 2012. 904 remaining
dim(input$map_loaded)
input$map_loaded <- input$map_loaded %>%
mutate(sampleID = paste("X", taxon_oid, sep = ""),
GenomeSize = `Genome.Size.....assembled`) %>%
left_join(., new_tab, by = "taxon_oid") %>%
separate(`Add.Date`, into = c("Day", "Month", "Year"), sep = "/", remove = F) %>%
mutate(Year = as.integer(Year)) %>%
filter(Year > 11) %>%
mutate(sampleID2 = sampleID) %>%
column_to_rownames(var = "sampleID2")
dim(input$map_loaded) # Now down to 904 samples
for (i in 1:nrow(input$map_loaded)) {
if (input$map_loaded$`Assembly.Method`[1] == "") {
input$map_loaded$`Assembly.Method`[i] <- "Unknown"
}
if (input$map_loaded$`Sequencing.Method`[i] == "") {
input$map_loaded$`Sequencing.Method`[i] <- "Unknown"
}
}
input$map_loaded <- input$map_loaded %>%
mutate_if(is.character, as.factor)
# Filter out samples with no genus level reads (7 removed, 897 remaining)
count <- as.data.frame(sort(colSums(input$data_loaded))) %>%
filter(`sort(colSums(input$data_loaded))` == 0)
input <- filter_data(input,
filter_cat = "sampleID",
filter_vals = rownames(count))
# Filter out 454 datasets (removes 42 samples. 855 remaining)
table(input$map_loaded$`Sequencing.Method`)
input <- filter_data(input,
filter_cat = "Sequencing.Method",
filter_vals = c("454", "454 GS FLX", "454 GS FLX Titanium",
"454 GS FLX Titanium, Illumina GAIIx",
"454 GS FLX Titanium, Illumina HiSeq 2000",
"Illumina HiSeq 2000, 454 GS FLX Titanium"))
# Filter by Assembly method? For now no. Also many unknowns...
table(input$map_loaded$`Assembly.Method`)
# Filter out Plasmid:Bacteria, Plasmid:Eukaryota, Viruses, unknown at Domain level
input <- filter_taxa_from_input(input,
taxa_to_remove = c("Plasmid:Bacteria",
"Plasmid:Eukaryota",
"Viruses",
"unknown"),
at_spec_level = 1) # 1243 taxa removed
#### _Start here ####
ko_comm_DESeq <- readRDS("data/ko_comm_DESeq_updated2.rds")
ko_meta <- readRDS("data/ko_meta_final.rds")
table(ko_meta$Environment)
sum(ko_meta$taxon_oid %in% input$map_loaded$taxon_oid)
table(input$map_loaded$Environment)
# Updated file annotated by Lara
# From 157, filtered to 56
stress_genes <- read.csv("data/stress_genes_sorted_5.19.23_LV.csv") %>%
filter(Notes == "ok")
# Data frame
gene_plot <- ko_comm_DESeq %>%
dplyr::select(stress_genes$KO) %>%
mutate("Environment" = ko_meta$Environment)
#### __ (I) Stats ####
# Run a loop
kruskal_results_genes <- as.data.frame(matrix(data = NA, ncol(gene_plot)-1, 3)) %>%
set_names(c("Gene", "X2", "P"))
for (i in 1:(ncol(gene_plot)-1)) {
k <- kruskal.test(gene_plot[[i]] ~ gene_plot$Environment)
kruskal_results_genes$Gene[i] <- names(gene_plot)[i]
kruskal_results_genes$X2[i] <- round(k$statistic, digits = 2)
kruskal_results_genes$P[i] <- k$p.value
}
kruskal_results_genes <- kruskal_results_genes %>%
filter(is.na(Gene) == F) %>%
mutate(Pfdr = p.adjust(P, method = "fdr"))
#### __ (II) Graphs ####
# Barplot
table(ko_meta$Environment)
gene_plot_long <- gene_plot %>%
pivot_longer(names(gene_plot)[1:nrow(stress_genes)],
names_to = "Gene", values_to = "Abundance") %>%
mutate(Gene = as.factor(Gene)) %>%
droplevels() %>%
mutate(Environment = dplyr::recode_factor(Environment,
"Acid mine drainage" = "Acid mine drainage (n = 23)",
"Cryosphere - soil" = "Cryosphere - soil (n = 46)",
"Cryosphere - water" = "Cryosphere - water (n = 38)",
"Desert" = "Desert (n = 80)",
"Glacial forefield" = "Glacial forefield (n = 49)",
"Hot spring" = "Hot spring (n = 109)",
"Hydrothermal vent" = "Hydrothermal vent (n = 174)",
"Hypersaline" = "Hypersaline (n = 139)",
"Soda lake" = "Soda lake (n = 18)"))
gene_plot_summary <- gene_plot_long %>%
group_by(Environment, Gene) %>%
summarise(mean = mean(Abundance),
se = std.error(Abundance))
# Too many to do barplot
ggplot(gene_plot_summary, aes(Environment, mean, fill = Gene, group = Gene)) +
geom_bar(stat = "identity", position = position_dodge(0.75)) +
geom_linerange(aes(x = Environment, ymin = mean - se, ymax = mean + se,
group = Gene),
position = position_dodge(0.75)) +
labs(x = NULL,
y = "Abundance (DESeq2 normalized)",
fill = "KO") +
#scale_fill_manual(values = brewer.pal(10, "Paired"),
#                  labels = ko_list$KO_def[1:10]) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1, vjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
legend.position = "right",
plot.margin = unit(c(0.1, 0.1, 0.1, 0.7), "cm"))
# Heatmap
# Use pheatmap (pretty heatmap) package
# Sort by environment
ko_meta_sorted <- ko_meta %>%
arrange(Environment)
reorder_idx <- match(rownames(ko_meta_sorted), rownames(ko_comm_DESeq))
ko_comm_DESeq_sorted <- ko_comm_DESeq[reorder_idx,]
sum(rownames(ko_meta_sorted) != rownames(ko_comm_DESeq_sorted))
# Sort by stress
stress_genes_sorted <- stress_genes %>%
arrange(Stress)
#write.csv(stress_genes_sorted, "stress_genes_sorted_5.19.23.csv")
stress_genes_sorted$KOsymb <- paste(stress_genes_sorted$KO, stress_genes_sorted$Symbol, sep = "; ")
gene_hm <- ko_comm_DESeq_sorted %>%
dplyr::select(stress_genes_sorted$KO) %>%
mutate("sampleID" = ko_meta_sorted$sampleID)
rownames(gene_hm) <- gene_hm$sampleID
gene_hm <- gene_hm %>%
dplyr::select(-sampleID) %>%
t() %>%
as.matrix()
ann_cols <- data.frame(row.names = colnames(gene_hm),
Environment = ko_meta_sorted$Environment)
ann_rows <- data.frame(row.names = rownames(gene_hm),
Stress = stress_genes_sorted$Stress)
ann_colors <- list(Environment = c("Acid mine drainage" = hue_pal()(9)[1],
"Cryosphere - soil" = hue_pal()(9)[2],
"Cryosphere - water" = hue_pal()(9)[3],
"Desert" = hue_pal()(9)[4],
"Glacial forefield" = hue_pal()(9)[5],
"Hot spring" = hue_pal()(9)[6],
"Hydrothermal vent" = hue_pal()(9)[7],
"Hypersaline" = hue_pal()(9)[8],
"Soda lake" = hue_pal()(9)[9]),
Stress = c("Alkaline pH" = viridis_pal()(17)[1],
"Cellular" = viridis_pal()(17)[2],
"Chlorine" = viridis_pal()(17)[3],
"Cold" = viridis_pal()(17)[4],
"Environmental" = viridis_pal()(17)[5],
"Environmental-Oxidative" = viridis_pal()(17)[6],
"General" = viridis_pal()(17)[7],
"Granule" = viridis_pal()(17)[8],
"Heat" = viridis_pal()(17)[9],
"Heat-Osmotic" = viridis_pal()(17)[10],
"High pH" = viridis_pal()(17)[11],
"Metal resistance-Zn" = viridis_pal()(17)[12],
"Osmotic" = viridis_pal()(17)[13],
"Osmotic, Low pH" = viridis_pal()(17)[14],
"Oxidative" = viridis_pal()(17)[15],
"pH" = viridis_pal()(17)[16],
"Starvation" = viridis_pal()(17)[17]))
phm1 <- pheatmap(gene_hm,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
border_color = NA,
scale = "row",
show_colnames = F,
angle_col = 315,
cluster_rows = F,
cluster_cols = F,
fontsize_row = 4,
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors)
# Still no good. Summarize by environment so there are only 9 columns
gene_plot_sorted <- ko_comm_DESeq_sorted %>%
dplyr::select(stress_genes_sorted$KO) %>%
mutate("Environment" = ko_meta_sorted$Environment)
gene_plot_long_sorted <- gene_plot_sorted %>%
pivot_longer(names(gene_plot)[1:nrow(stress_genes)],
names_to = "Gene", values_to = "Abundance") %>%
mutate(Environment = dplyr::recode_factor(Environment,
"Acid mine drainage" = "Acid mine drainage (n = 23)",
"Cryosphere - soil" = "Cryosphere - soil (n = 46)",
"Cryosphere - water" = "Cryosphere - water (n = 38)",
"Desert" = "Desert (n = 80)",
"Glacial forefield" = "Glacial forefield (n = 49)",
"Hot spring" = "Hot spring (n = 109)",
"Hydrothermal vent" = "Hydrothermal vent (n = 174)",
"Hypersaline" = "Hypersaline (n = 139)",
"Soda lake" = "Soda lake (n = 18)"))
gene_plot_summary_sorted <- gene_plot_long_sorted %>%
group_by(Environment, Gene) %>%
summarise(mean = mean(Abundance),
se = std.error(Abundance))
gene_hm_summary <- gene_plot_summary_sorted %>%
dplyr::select(-se) %>%
pivot_wider(names_from = Environment, values_from = mean) %>%
column_to_rownames(var = "Gene") %>%
t() %>%
as.data.frame() %>%
dplyr::select(stress_genes_sorted$KO) %>%
t() %>%
as.matrix()
rownames(gene_hm_summary) <- stress_genes_sorted$KOsymb
ann_rows <- data.frame(row.names = rownames(gene_hm_summary),
Stress = stress_genes_sorted$Stress)
# Shortened list
ann_colors <- list(Stress = c("Cold" = viridis_pal()(5)[1],
"General" = viridis_pal()(5)[2],
"Heat" = viridis_pal()(5)[3],
"Osmotic" = viridis_pal()(5)[4],
"Oxidative" = viridis_pal()(5)[5]))
phm1 <- pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.66),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
method = "ward.D2",
fontsize_row = 8,
gaps_row = c(12, 25, 29, 38),
annotation_row = ann_rows,
annotation_colors = ann_colors)
# Figure 6
pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.66),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
clustering_method = "ward.D2",
fontsize_row = 9,
gaps_row = c(12, 25, 29, 38),
annotation_row = ann_rows,
annotation_colors = ann_colors,
file = "FinalFigs/Figure6.png",
height = 12,
width = 7)
dev.off()
# Figure 6
pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.66),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
clustering_method = "ward.D2",
fontsize_row = 10,
gaps_row = c(12, 25, 29, 38),
annotation_row = ann_rows,
annotation_colors = ann_colors,
file = "FinalFigs/Figure6.png",
height = 12,
width = 7)
dev.off()
dev.set(dev.next())
dev.set(dev.next())
# Figure 6
pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.66),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
clustering_method = "ward.D2",
fontsize_row = 10,
gaps_row = c(12, 25, 29, 38),
annotation_row = ann_rows,
annotation_colors = ann_colors,
file = "FinalFigs/Figure6.png",
height = 12,
width = 7)
