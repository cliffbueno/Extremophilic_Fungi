suppressWarnings(suppressMessages(library(readxl))) # For read_xlsx
suppressWarnings(suppressMessages(library(janitor))) # For cleaning
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plyr))) # For data manipulation
suppressWarnings(suppressMessages(library(tidyverse))) # For data manipulation
suppressWarnings(suppressMessages(library(reshape2))) # For melting
suppressWarnings(suppressMessages(library(vegan))) # For analysis
suppressWarnings(suppressMessages(library(car))) # For leveneTest
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc test
suppressWarnings(suppressMessages(library(indicspecies))) # For multipatt
suppressWarnings(suppressMessages(library(scales))) # For muted
suppressWarnings(suppressMessages(library(DESeq2))) # For normalization
suppressWarnings(suppressMessages(library(FSA))) # For standard error
suppressWarnings(suppressMessages(library(mctoolsr))) # For taxonomic analysis
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel graphs
suppressWarnings(suppressMessages(library(plotly))) # For interactive graphs
suppressWarnings(suppressMessages(library(RColorBrewer))) # For color palettes
suppressWarnings(suppressMessages(library(dendextend))) # For dendrogram plots
suppressWarnings(suppressMessages(library(viridis))) # For viridis palette
suppressWarnings(suppressMessages(library(gplots))) # For heatmaps
suppressWarnings(suppressMessages(library(maps))) # For geographic maps
suppressWarnings(suppressMessages(library(mapproj))) # For geographic maps
suppressWarnings(suppressMessages(library(magrittr))) # For setting column names
suppressWarnings(suppressMessages(library(writexl))) # For writing Excel file
suppressWarnings(suppressMessages(library(plotrix))) # For standard error
suppressWarnings(suppressMessages(library(emmeans))) # For Tukey
suppressWarnings(suppressMessages(library(multcomp))) # For Tukey
suppressWarnings(suppressMessages(library(RCurl))) # For KEGG
suppressWarnings(suppressMessages(library(KEGGREST))) # For KEGG
suppressWarnings(suppressMessages(library(multcompView))) # For significance letters
suppressWarnings(suppressMessages(library(rcompanion))) # For significance letters
suppressWarnings(suppressMessages(library(pheatmap))) # For heatmaps
suppressWarnings(suppressMessages(library(qvalue))) # For qvalue
suppressWarnings(suppressMessages(library(writexl))) # For writing to Excel
suppressWarnings(suppressMessages(library(ggpubr))) # For density plots
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc
suppressWarnings(suppressMessages(library(DirichletReg))) # For analyzing proportions
suppressWarnings(suppressMessages(library(MASS))) # For zinf reg
suppressWarnings(suppressMessages(library(pscl))) # For zinf reg
suppressWarnings(suppressMessages(library(boot))) # For zinf reg
suppressWarnings(suppressMessages(library(gamlss))) # For zinf reg
suppressWarnings(suppressMessages(library(writexl))) # Write Excel spreadsheets
# Working directory (GitHub repository)
setwd("~/Documents/GitHub/Extremophilic_Fungi/")
# Note directory is organized into folders for code and data
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
`%notin%` <- Negate(`%in%`)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 5) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
source("code/plot_multipatt.R")
source("code/compareBC.R")
# Custom color palette from Benjamin Young
color_mapping <- c(
"Acid mine drainage" = "darkorange",
"Cryosphere - soil" = "lightskyblue3",
"Cryosphere - water" = "royalblue",
"Desert" = "burlywood2",
"Glacial forefield" = "grey70",
"Hot spring" = "red",
"Hydrothermal vent" = "firebrick4",
"Hypersaline" = "plum2",
"Soda lake" = "magenta3"
)
#### _Start Here  ####
input <- readRDS("data/input.rds")
# Check sequencing depth
sort(colSums(input$data_loaded))
mean(colSums(input$data_loaded)) # 361620.7
se(colSums(input$data_loaded)) # 19512.19
input$map_loaded$count <- colSums(input$data_loaded)
# Genus reads
ggplot(input$map_loaded, aes(reorder(`Environment`, count, mean), count)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1.5, alpha = 0.25, width = 0.25) +
labs(x = "Environment",
y = "# Reads") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Genome size
ggplot(input$map_loaded, aes(reorder(`Environment`, GenomeSize, median), log10(GenomeSize))) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1.5, alpha = 0.25, width = 0.25) +
labs(x = "Environment",
y = "Assembled metagenome size") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Log 10
ggplot(input$map_loaded, aes(reorder(`Environment`, GenomeSize, median), log10(GenomeSize))) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1.5, alpha = 0.25, width = 0.25) +
labs(x = "Environment",
y = "Assembled metagenome size") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Log axis - use this, old Figure 1d, now Figure S1
# To sort by "Fungi" need to run some code below first (line 598)
#### ___Figure S1 ####
gs <- ggplot(input$map_loaded, aes(reorder(`Environment`, Fungi, median), GenomeSize,
colour = Environment)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, alpha = 0.5, width = 0.25, shape = 16) +
scale_colour_manual(values = color_mapping) +
labs(x = NULL,
y = "Assembly size (bp)") +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))) +
annotation_logticks(sides = "l", outside = T, short = unit(1,"mm"), mid = unit(1,"mm"),
long = unit(2,"mm")) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
gs
max(input$map_loaded$GenomeSize) # > 1 billion
min(input$map_loaded$GenomeSize) # 380429
ggplot(input$map_loaded, aes(GenomeSize, count)) +
geom_point(size = 1.5, alpha = 0.25) +
geom_smooth(method = "lm") +
labs(x = "Assembled genome size",
y = "Assigned genus genes") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10))
#### __Check Euks ####
# View Domain level taxa
# This shows that euks are not very relatively abundant in these environments
tax_sum_Domain <- summarize_taxonomy(input, level = 1, report_higher_tax = T, relative = TRUE)
plot_taxa_bars(tax_sum_Domain,
input$map_loaded,
type_header = "Environment",
num_taxa = 100,
data_only = F) +
theme_classic() +
labs(x = "Environment",
y = "Relative abundance",
fill = "Domain") +
theme(legend.position = "right",
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Range of % abundance in individual samples
range(tax_sum_Domain[3,]) # 0 to 0.636, so can be high in some samples
# Euks
euks <- tax_sum_Domain[3,]
plot_taxa_bars(euks,
input$map_loaded,
type_header = "Environment",
num_taxa = 100,
data_only = F) +
scale_fill_manual(values = c("grey")) +
theme_classic() +
labs(x = "Environment",
y = "Relative abundance") +
theme(legend.position = "none",
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
euks_t <- as.data.frame(t(euks))
input$map_loaded$Euks <- euks_t$Eukaryota
ggplot(input$map_loaded, aes(reorder(sampleID, Euks, mean), Euks, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
labs(x = NULL,
y = "Relative abundance") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Too many, filter top ones (> 5%), want to see which environments the top samples are from
eukabund <- data.frame("Euks" = input$map_loaded$Euks,
"sampleID" = input$map_loaded$sampleID) %>%
filter(Euks > 0.05) %>%
column_to_rownames(var = "sampleID")
topeuk <- filter_data(input,
filter_cat = "sampleID",
keep_vals = rownames(eukabund))
ggplot(topeuk$map_loaded, aes(reorder(sampleID, Euks, mean), Euks, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
geom_hline(yintercept = 0.05, linetype = "dashed") +
scale_y_continuous(expand = c(0.01, 0.01)) +
labs(x = NULL,
y = "Relative abundance") +
ggtitle("Samples with Eukaryota > 5% (n = 33)") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5))
#### __Check Fungi ####
# First do same as done above for euk but extract fungal phyla
tax_sum_phyla <- summarize_taxonomy(input, level = 2, report_higher_tax = T, relative = T)
fungal_phyla <- tax_sum_phyla[grep("Ascomycota|Basidiomycota|Blastocladiomycota|Chytridiomycota|
Cryptomycota|Microsporidia|Mucoromycota|Nephridiophagidae|Olpidiomycota|
Sanchytriomycota|Zoopagomycota", rownames(tax_sum_phyla)),]
fungal_phyla <- fungal_phyla[!grepl("Plasmid", rownames(fungal_phyla)),]
rownames(fungal_phyla) <- substring(rownames(fungal_phyla), 12)
plot_taxa_bars(fungal_phyla,
input$map_loaded,
type_header = "Environment",
num_taxa = 100,
data_only = F) +
geom_hline(yintercept = 0.01, linetype = "dashed", color = "grey") +
theme_classic() +
labs(x = "Environment",
y = "Relative abundance",
fill = "Phylum") +
theme(legend.position = "right",
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Get summed relative abundance of fungi and plot by sample and environment
input$map_loaded$Fungi <- colSums(fungal_phyla)
ggplot(input$map_loaded, aes(reorder(sampleID, Fungi, mean), Fungi, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
labs(x = NULL,
y = "Relative abundance") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Too many, filter top ones (> 1%), want to see which environments the top samples are from
funabund <- data.frame("Fungi" = input$map_loaded$Fungi,
"sampleID" = input$map_loaded$sampleID) %>%
filter(Fungi > 0.01) %>%
column_to_rownames(var = "sampleID")
topfun <- filter_data(input,
filter_cat = "sampleID",
keep_vals = rownames(funabund))
ggplot(topfun$map_loaded, aes(reorder(sampleID, Fungi, mean), Fungi, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
geom_hline(yintercept = 0.01, linetype = "dashed") +
scale_y_continuous(expand = c(0.01, 0.01)) +
labs(x = NULL,
y = "Relative abundance") +
ggtitle("Samples with Fungi > 1% (n = 38)") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5))
# By environment
hist(input$map_loaded$Fungi)
hist(log(input$map_loaded$Fungi))
leveneTest(input$map_loaded$Fungi ~ input$map_loaded$Environment) # Bad
m1 <- aov(Fungi ~ Environment, data = input$map_loaded)
shapiro.test(m1$residuals) # Bad
hist(m1$residuals)
plot(m1$fitted.values, m1$residuals)
summary(m1)
TukeyHSD(m1)
kruskal.test(Fungi ~ Environment, data = input$map_loaded)
nyi1 <- kwAllPairsNemenyiTest(Fungi ~ Environment, data = input$map_loaded)
nyi_table1 <- fullPTable(nyi1$p.value)
nyi_list1 <- multcompLetters(nyi_table1)
nyi_let1 <- as.data.frame(nyi_list1$Letters) %>%
mutate(label = `nyi_list1$Letters`,
y = rep(0.12, nrow(.))) %>%
rownames_to_column(var = "Environment")
ggplot(input$map_loaded, aes(reorder(Environment, Fungi, mean), Fungi)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1, alpha = 0.2, width = 0.4) +
geom_text(data = nyi_let1, aes(Environment, y, label = label),
size = 4, color = "black") +
labs(x = NULL, y = "Fungal relative abundance") +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
strip.text = element_text(size = 10))
# Explore
ggplot(input$map_loaded, aes(reorder(Environment, Fungi, mean), log(Fungi))) +
geom_violin(outlier.shape = NA) +
geom_boxplot(outlier.shape = NA, width = 0.1) +
geom_jitter(size = 1, alpha = 0.2, width = 0.4) +
geom_text(data = nyi_let1, aes(Environment, y, label = label),
size = 4, color = "black") +
labs(x = NULL, y = "Fungal relative abundance") +
ylim(-14, 0.1) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
strip.text = element_text(size = 10))
# Zero-inflated negative binomial?
# Can't use because numeric not integer
z1 <- zeroinfl(Fungi ~ Environment, data = input$map_loaded, dist = "negbin")
summary(z1)
# Zero-inflated Beta regression
d <- input$map_loaded # emmeans can't handle $
b1 <- gamlss(input$map_loaded$Fungi ~ d$Environment,  family = BEZI, trace = F)
summary(b1)
plot(b1)
emmeans(b1, "Environment", type = "response")
pairs(.Last.value)
tuk <- emmeans(object = b1, specs = "Environment") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "rich",
y = rep(11, nrow(.))) %>%
mutate(label = c("a", "a", "abc", "ab", "bc", "abc", "c", "abc", "bc"))
br_plot <- ggplot(input$map_loaded, aes(reorder(Environment, Fungi, median), Fungi*100,
colour = Environment)) +
geom_jitter(size = 2, alpha = 0.5, width = 0.4, shape = 16) +
geom_text(data = tuk, aes(Environment, y, label = label),
size = 4, color = "black", hjust = 0.5) +
labs(x = NULL, y = "Fungal % abund.") +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10)) +
scale_colour_manual(values = color_mapping) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
strip.text = element_text(size = 10))
br_plot
min(input$map_loaded$Fungi) # 0
max(input$map_loaded$Fungi) # 10.4%
mean(input$map_loaded$Fungi) # 0.18%
se(input$map_loaded$Fungi) # 0.03%
#### __Filter ####
# Now filter to euk and then fungi (extract fungal phyla)
input_euk <- filter_taxa_from_input(input,
taxa_to_keep = "Eukaryota",
at_spec_level = 1)
# Check phyla
table(input_euk$taxonomy_loaded$taxonomy2)
# List of RefSeq fungal phyla
fungal_phyla_names <- c("Ascomycota", "Basidiomycota", "Blastocladiomycota",
"Chytridiomycota","Cryptomycota", "Microsporidia",
"Mucoromycota", "Nephridiophagidae", "Olpidiomycota",
"Sanchytriomycota", "Zoopagomycota")
input_fungi <- filter_taxa_from_input(input_euk,
taxa_to_keep = fungal_phyla_names,
at_spec_level = 2)
# Filter out plasmids (2 removed in earlier version. now not found)
input_fungi <- filter_taxa_from_input(input_fungi,
taxa_to_remove = "Plasmid:Eukaryota",
at_spec_level = 1)
nrow(input$taxonomy_loaded) # 5936 total
nrow(input_euk$taxonomy_loaded) # 432 euks
nrow(input_fungi$taxonomy_loaded) # 319 rows
unique(input_fungi$taxonomy_loaded$taxonomy6) # 293 unique genera
# Now check reads again (not actually reads, but fungal assigned CDS counts)
sort(colSums(input_fungi$data_loaded))
# Note lots of samples with 0 or very few fungi
# Purposefully not filtering those out those as 0's are interesting in this analysis
# These are extreme environments, some may have few to no fungi
# Further below, however, some analyses will be done with zeroes removed
mean(colSums(input_fungi$data_loaded)) # 555.6409
se(colSums(input_fungi$data_loaded)) # 63.5079
input_fungi$map_loaded$fung_count <- colSums(input_fungi$data_loaded)
input_fungi$map_loaded$present <- ifelse(input_fungi$map_loaded$fung_count > 0,
1,
0)
# Note, will do this again but with CPM normalization
ggplot(input_fungi$map_loaded, aes(reorder(`Environment`, fung_count, mean), fung_count)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1.5, alpha = 0.25, width = 0.25) +
labs(x = "Environment",
y = "# Fungal Reads") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
ggplot(input_fungi$map_loaded, aes(GenomeSize, fung_count)) +
geom_point(size = 1.5, alpha = 0.25) +
geom_smooth(method = "lm") +
labs(x = "Assembled genome size",
y = "Assigned fungal gene count") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10))
summary(lm(input_fungi$map_loaded$fung_count ~ input_fungi$map_loaded$GenomeSize))
# Get and plot fraction of samples with 0 versus > 0 fungal reads, and also n
env_prev <- input_fungi$map_loaded %>%
group_by(Environment) %>%
summarise(num_present = sum(present),
num_samples = n(),
prevalence = round(num_present/num_samples * 100, digits = 2)) %>%
mutate(num_absent = num_samples - num_present)
sum(env_prev$num_samples) # 855
sum(env_prev$num_present) # 731
# Melt for stacked bar
env_prev_long <- melt(env_prev,
id.vars = "Environment",
measure.vars = c("num_present", "num_absent"))
ggplot(env_prev, aes(reorder(Environment, prevalence, mean), prevalence)) +
geom_bar(stat = "identity") +
labs(x = NULL,
y = "% prevalence of fungi") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
ggplot(env_prev_long, aes(reorder(Environment, value, mean), value,
group = Environment, fill = variable)) +
geom_bar(stat = "identity") +
geom_text(data = env_prev,
aes(reorder(Environment, num_samples, mean), num_samples+10,
label = num_samples), inherit.aes = F) +
scale_fill_manual(values = c("#F8766D", "#619CFF"),
breaks = c("num_absent", "num_present"),
labels = c("Absent", "Present")) +
labs(x = NULL,
y = "Sample size",
fill = "Fungi") +
ggtitle("Total sample size = 855\nSamples with Fungi = 732") +
theme_bw() +
theme(legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank(),
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
#### _Alpha ####
# Look at number of different taxa levels by environments
# Don't use input$data_loaded. Need to use summarize taxonomy first
# Genus richness
fun_gen <- summarize_taxonomy(input_fungi, level = 6, report_higher_tax = F, relative = F)
input_fungi$map_loaded$rich <- specnumber(fun_gen,
MARGIN = 2)
max(input_fungi$map_loaded$rich) # 289
mean(input_fungi$map_loaded$rich)
se(input_fungi$map_loaded$rich)
