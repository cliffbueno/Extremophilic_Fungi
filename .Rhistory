axis.title.y = element_blank())
pdf("InitialFigs/Comb_All_Biogeochem.pdf", width = 10, height = 10)
ggplot(metaComb_long, aes(Estuary, value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free_y") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_blank())
dev.off()
# Methane relationships
ggplot(metaComb, aes(Salinity_ppt_all, CH4_ug_m2_h)) +
geom_point(aes(color = Estuary)) +
geom_smooth() +
scale_color_viridis_d() +
labs(x = "Salinity (ppt)",
y = "CH4 (ug/m2/h)") +
theme_bw()
ggplot(metaComb, aes(Salinity_ppt_all, CH4_ug_m2_h)) +
geom_point(aes(color = Estuary)) +
geom_smooth() +
scale_y_log10() +
scale_color_viridis_d() +
labs(x = "Salinity (ppt)",
y = "CH4 (ug/m2/h)") +
theme_bw()
ggplot(metaComb, aes(Estuary, CH4_ug_m2_h)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_blank())
ggplot(metaComb, aes(Estuary, CH4_ug_m2_h, colour = Estuary)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter() +
scale_y_log10() +
scale_color_viridis_d() +
theme_bw() +
theme(legend.position = "none")
ggplot(metaComb, aes(Salinity_ppt_all, CH4_ug_m2_h)) +
geom_point(aes(color = Estuary)) +
geom_smooth(method = "lm") +
scale_y_log10() +
scale_color_viridis_d() +
facet_wrap(~ Estuary, ncol = 4) +
labs(x = "Salinity (ppt)",
y = "CH4 (ug/m2/h)") +
theme_bw()
# Show trends by estuary
pdf("InitialFigs/Comb_All_CH4_Salinity.pdf", width = 9, height = 4)
ggplot(metaComb, aes(Salinity_ppt_all, CH4_ug_m2_h)) +
geom_point(aes(color = Estuary)) +
geom_smooth(method = "lm") +
scale_y_log10() +
scale_color_viridis_d() +
facet_wrap(~ Estuary, ncol = 4) +
labs(x = "Salinity (ppt)",
y = "CH4 (ug/m2/h)") +
theme_bw()
# Show trends by estuary
pdf("InitialFigs/Comb_All_CH4_Salinity.pdf", width = 9, height = 4)
dev.off()
# Show trends by estuary
pdf("InitialFigs/Comb_All_CH4_Salinity.pdf", width = 9, height = 4)
pdf("InitialFigs/Comb_All_CH4.pdf", width = 7, height = 5)
dev.off()
library(cowplot)
library(pheatmap)
seq(1:17)
seq(17:1)
install.packages("codyn")
library(codyn) # Turnover
install.packages("iCAMP")
library(iCamp)
library(iCAMP)
library(PMCMRplus)
library(ggtree)
library(plyr)
library(tidyverse)
library(ape)
library(picante)
library(dendextend)
library(readxl)
library(scales)
library(pheatmap)
library(RColorBrewer)
library(ggtree)
#### 2. Tree ####
# Tree from KBase made with 49 COGs
TL_tree <- read.tree("~/Documents/GitHub/Timberlake/dRep_Tree_20-labels.newick")
# Prune the one non-MAG
TL_tree <- drop.tip(TL_tree, tip = "Frateuriasp.Soil773")
# Trim the tip labels
TL_tree$tip.label <- substr(TL_tree$tip.label, start = 1, stop = nchar(TL_tree$tip.label)-11)
# Trim the node labels
TL_tree$node.label <- as.character(round(as.numeric(TL_tree$node.label), digits = 2))
TL_tree$node.label <- replace_na(TL_tree$node.label, replace = "")
par(oma = c(1,0,0,1))
plot.phylo(TL_tree,
align.tip.label = T,
no.margin = T,
font = 1,
cex = 0.6,
edge.width = 2,
show.node.label = T,
node.pos = 1,
label.offset = 0.005,
adj = 0)
add.scale.bar(x = 0.5, y = 0.5)
title("MAG Phylogeny\nfrom 49 COGs", adj = 0.1, line = -3)
text(x = 0.15, y = 1.5, label = "Archaea")
text(x = 0.15, y = 6.6, label = "Bacteria")
dev.off()
par(oma = c(1,0,0,1))
plot.phylo(TL_tree,
align.tip.label = T,
no.margin = T,
font = 1,
cex = 0.6,
edge.width = 2,
show.node.label = T,
node.pos = 1,
label.offset = 0.005,
adj = 0)
add.scale.bar(x = 0.5, y = 0.5)
text(x = 0.15, y = 1.5, label = "Archaea")
text(x = 0.15, y = 6.6, label = "Bacteria")
dev.off()
# Plot with ggtree
ggtree(TL_tree)
rlang::last_error()
rlang::last_trace()
devtools::install("dplyr", version = "1.0.5")
install_version("dplyr", version = "1.0.5", repos = "http://cran.us.r-project.org")
library(devtools)
install_version("dplyr", version = "1.0.5", repos = "http://cran.us.r-project.org")
library(ggplot2)
library(ggh4x)
library(scales)
viridis_pal()(4)
suppressWarnings(suppressMessages(library(readxl))) # For read_xlsx
suppressWarnings(suppressMessages(library(janitor))) # For cleaning
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel
suppressWarnings(suppressMessages(library(plyr))) # For data manipulation
suppressWarnings(suppressMessages(library(tidyverse))) # For data manipulation
suppressWarnings(suppressMessages(library(reshape2))) # For melting
suppressWarnings(suppressMessages(library(vegan))) # For analysis
suppressWarnings(suppressMessages(library(car))) # For leveneTest
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc test
suppressWarnings(suppressMessages(library(indicspecies))) # For multipatt
suppressWarnings(suppressMessages(library(scales))) # For muted
suppressWarnings(suppressMessages(library(DESeq2))) # For normalization
suppressWarnings(suppressMessages(library(FSA))) # For standard error
suppressWarnings(suppressMessages(library(mctoolsr))) # For taxonomic analysis
suppressWarnings(suppressMessages(library(cowplot))) # For multipanel graphs
suppressWarnings(suppressMessages(library(plotly))) # For interactive graphs
suppressWarnings(suppressMessages(library(RColorBrewer))) # For color palettes
suppressWarnings(suppressMessages(library(dendextend))) # For dendrogram plots
suppressWarnings(suppressMessages(library(viridis))) # For viridis palette
suppressWarnings(suppressMessages(library(gplots))) # For heatmaps
suppressWarnings(suppressMessages(library(maps))) # For geographic maps
suppressWarnings(suppressMessages(library(mapproj))) # For geographic maps
suppressWarnings(suppressMessages(library(magrittr))) # For setting column names
suppressWarnings(suppressMessages(library(writexl))) # For writing Excel file
suppressWarnings(suppressMessages(library(plotrix))) # For standard error
suppressWarnings(suppressMessages(library(emmeans))) # For Tukey
suppressWarnings(suppressMessages(library(multcomp))) # For Tukey
suppressWarnings(suppressMessages(library(RCurl))) # For KEGG
suppressWarnings(suppressMessages(library(KEGGREST))) # For KEGG
suppressWarnings(suppressMessages(library(multcompView))) # For significance letters
suppressWarnings(suppressMessages(library(rcompanion))) # For significance letters
suppressWarnings(suppressMessages(library(pheatmap))) # For heatmaps
suppressWarnings(suppressMessages(library(qvalue))) # For qvalue
suppressWarnings(suppressMessages(library(writexl))) # For writing to Excel
suppressWarnings(suppressMessages(library(ggpubr))) # For density plots
suppressWarnings(suppressMessages(library(PMCMRplus))) # For Nemenyi posthoc
suppressWarnings(suppressMessages(library(DirichletReg))) # For analyzing proportions
suppressWarnings(suppressMessages(library(MASS))) # For zinf reg
suppressWarnings(suppressMessages(library(pscl))) # For zinf reg
suppressWarnings(suppressMessages(library(boot))) # For zinf reg
suppressWarnings(suppressMessages(library(gamlss))) # For zinf reg
# Working directory (GitHub repository)
setwd("~/Documents/GitHub/Extremophilic_Fungi/")
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
`%notin%` <- Negate(`%in%`)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 5) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
source("plot_multipatt.R")
source("compareBC.R")
#### _Setup ####
# Import with mctoolsr (matches sampleIDs, 1141 samples)
tax_table_fp <- file.path("genus_table_mctoolsr_updated.txt")
map_fp <- file.path("metadata_updated.txt")
input = load_taxa_table(tax_table_fp, map_fp)
new_tab <- read_excel("Extremophilic_fungi_dataset_final.xlsx", sheet = 1) %>%
mutate(Location2 = Geographic.Location) %>%
dplyr::select(taxon_oid, Study.Name2, Location2, Environment)
table(new_tab$Environment)
#### _Start here ####
ko_comm_DESeq <- readRDS("ko_comm_DESeq_updated.rds")
ko_meta <- readRDS("ko_meta.rds")
# Updated file annotated by Lara
stress_genes <- read.csv("stress_genes_sorted_5.19.23_LV.csv")
View(stress_genes)
# Updated file annotated by Lara
stress_genes <- read.csv("stress_genes_sorted_5.19.23_LV.csv") %>%
filter(Notes == "ok")
stress_genes <- read.csv("stress_genes_sorted_5.19.23_LV.csv")
# Updated file annotated by Lara
# From 157, filtered to 56
stress_genes <- read.csv("stress_genes_sorted_5.19.23_LV.csv") %>%
filter(Notes == "ok")
# Data frame
gene_plot <- ko_comm_DESeq %>%
dplyr::select(stress_genes$KO) %>%
mutate("Environment" = ko_meta$Environment)
#### __ (I) Stats ####
# Run a loop
kruskal_results_genes <- as.data.frame(matrix(data = NA, ncol(gene_plot)-1, 3)) %>%
set_names(c("Gene", "X2", "P"))
for (i in 1:(ncol(gene_plot)-1)) {
k <- kruskal.test(gene_plot[[i]] ~ gene_plot$Environment)
kruskal_results_genes$Gene[i] <- names(gene_plot)[i]
kruskal_results_genes$X2[i] <- round(k$statistic, digits = 2)
kruskal_results_genes$P[i] <- k$p.value
}
kruskal_results_genes <- kruskal_results_genes %>%
filter(is.na(Gene) == F) %>%
mutate(Pfdr = p.adjust(P, method = "fdr"))
View(kruskal_results_genes)
#### __ (II) Graphs ####
# Barplot
table(ko_meta$Environment)
gene_plot_long <- gene_plot %>%
pivot_longer(names(gene_plot)[1:157],
names_to = "Gene", values_to = "Abundance") %>%
mutate(Gene = as.factor(Gene)) %>%
droplevels() %>%
mutate(Environment = dplyr::recode_factor(Environment,
"Acid mine drainage" = "Acid mine drainage (n = 33)",
"Cryosphere" = "Cryosphere (n = 47)",
"Desert" = "Desert (n = 33)",
"Glacial forefield" = "Glacial forefield (n = 60)",
"Hot spring" = "Hot spring (n = 167)",
"Hydrothermal vent" = "Hydrothermal vent (n = 237)",
"Hypersaline" = "Hypersaline (n = 225)",
"Soda lake" = "Soda lake (n = 25)"))
length(stress_genes)
ncol(stress_genes)
nrow(stress_genes)
gene_plot_long <- gene_plot %>%
pivot_longer(names(gene_plot)[1:nrow(stress_genes)],
names_to = "Gene", values_to = "Abundance") %>%
mutate(Gene = as.factor(Gene)) %>%
droplevels() %>%
mutate(Environment = dplyr::recode_factor(Environment,
"Acid mine drainage" = "Acid mine drainage (n = 33)",
"Cryosphere" = "Cryosphere (n = 47)",
"Desert" = "Desert (n = 33)",
"Glacial forefield" = "Glacial forefield (n = 60)",
"Hot spring" = "Hot spring (n = 167)",
"Hydrothermal vent" = "Hydrothermal vent (n = 237)",
"Hypersaline" = "Hypersaline (n = 225)",
"Soda lake" = "Soda lake (n = 25)"))
gene_plot_summary <- gene_plot_long %>%
group_by(Environment, Gene) %>%
summarise(mean = mean(Abundance),
se = std.error(Abundance))
# Too many to do barplot
ggplot(gene_plot_summary, aes(Environment, mean, fill = Gene, group = Gene)) +
geom_bar(stat = "identity", position = position_dodge(0.75)) +
geom_linerange(aes(x = Environment, ymin = mean - se, ymax = mean + se,
group = Gene),
position = position_dodge(0.75)) +
labs(x = NULL,
y = "Abundance (DESeq2 normalized)",
fill = "KO") +
#scale_fill_manual(values = brewer.pal(10, "Paired"),
#                  labels = ko_list$KO_def[1:10]) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1, vjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
legend.position = "right",
plot.margin = unit(c(0.1, 0.1, 0.1, 0.7), "cm"))
# Heatmap
# Use pheatmap (pretty heatmap) package
# Sort by environment
ko_meta_sorted <- ko_meta %>%
arrange(Environment)
reorder_idx <- match(rownames(ko_meta_sorted), rownames(ko_comm_DESeq))
ko_comm_DESeq_sorted <- ko_comm_DESeq[reorder_idx,]
sum(rownames(ko_meta_sorted) != rownames(ko_comm_DESeq_sorted))
# Sort by stress
stress_genes_sorted <- stress_genes %>%
arrange(Stress)
#write.csv(stress_genes_sorted, "stress_genes_sorted_5.19.23.csv")
stress_genes_sorted$KOsymb <- paste(stress_genes_sorted$KO, stress_genes_sorted$Symbol, sep = "; ")
gene_hm <- ko_comm_DESeq_sorted %>%
dplyr::select(stress_genes_sorted$KO) %>%
mutate("sampleID" = ko_meta_sorted$sampleID)
rownames(gene_hm) <- gene_hm$sampleID
gene_hm <- gene_hm %>%
dplyr::select(-sampleID) %>%
t() %>%
as.matrix()
ann_cols <- data.frame(row.names = colnames(gene_hm),
Environment = ko_meta_sorted$Environment)
ann_rows <- data.frame(row.names = rownames(gene_hm),
Stress = stress_genes_sorted$Stress)
ann_colors <- list(Environment = c("Acid mine drainage" = hue_pal()(9)[1],
"Cryosphere - soil" = hue_pal()(9)[2],
"Cryosphere - water" = hue_pal()(9)[3],
"Desert" = hue_pal()(9)[4],
"Glacial forefield" = hue_pal()(9)[5],
"Hot spring" = hue_pal()(9)[6],
"Hydrothermal vent" = hue_pal()(9)[7],
"Hypersaline" = hue_pal()(9)[8],
"Soda lake" = hue_pal()(9)[9]),
Stress = c("Alkaline pH" = viridis_pal()(17)[1],
"Cellular" = viridis_pal()(17)[2],
"Chlorine" = viridis_pal()(17)[3],
"Cold" = viridis_pal()(17)[4],
"Environmental" = viridis_pal()(17)[5],
"Environmental-Oxidative" = viridis_pal()(17)[6],
"General" = viridis_pal()(17)[7],
"Granule" = viridis_pal()(17)[8],
"Heat" = viridis_pal()(17)[9],
"Heat-Osmotic" = viridis_pal()(17)[10],
"High pH" = viridis_pal()(17)[11],
"Metal resistance-Zn" = viridis_pal()(17)[12],
"Osmotic" = viridis_pal()(17)[13],
"Osmotic, Low pH" = viridis_pal()(17)[14],
"Oxidative" = viridis_pal()(17)[15],
"pH" = viridis_pal()(17)[16],
"Starvation" = viridis_pal()(17)[17]))
phm1 <- pheatmap(gene_hm,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
border_color = NA,
scale = "row",
show_colnames = F,
angle_col = 315,
cluster_rows = F,
cluster_cols = F,
fontsize_row = 4,
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors)
# Still no good. Summarize by environment so there are only 9 columns
gene_plot_sorted <- ko_comm_DESeq_sorted %>%
dplyr::select(stress_genes_sorted$KO) %>%
mutate("Environment" = ko_meta_sorted$Environment)
gene_plot_long_sorted <- gene_plot_sorted %>%
pivot_longer(names(gene_plot)[1:157],
names_to = "Gene", values_to = "Abundance") %>%
mutate(Environment = dplyr::recode_factor(Environment,
"Acid mine drainage" = "Acid mine drainage (n = 33)",
"Cryosphere - soil" = "Cryosphere - soil (n = 27)",
"Cryosphere - water" = "Cryosphere - water (n = 20)",
"Desert" = "Desert (n = 33)",
"Glacial forefield" = "Glacial forefield (n = 60)",
"Hot spring" = "Hot spring (n = 167)",
"Hydrothermal vent" = "Hydrothermal vent (n = 237)",
"Hypersaline" = "Hypersaline (n = 225)",
"Soda lake" = "Soda lake (n = 25)"))
gene_plot_long_sorted <- gene_plot_sorted %>%
pivot_longer(names(gene_plot)[1:nrow(stress_genes)],
names_to = "Gene", values_to = "Abundance") %>%
mutate(Environment = dplyr::recode_factor(Environment,
"Acid mine drainage" = "Acid mine drainage (n = 33)",
"Cryosphere - soil" = "Cryosphere - soil (n = 27)",
"Cryosphere - water" = "Cryosphere - water (n = 20)",
"Desert" = "Desert (n = 33)",
"Glacial forefield" = "Glacial forefield (n = 60)",
"Hot spring" = "Hot spring (n = 167)",
"Hydrothermal vent" = "Hydrothermal vent (n = 237)",
"Hypersaline" = "Hypersaline (n = 225)",
"Soda lake" = "Soda lake (n = 25)"))
gene_plot_summary_sorted <- gene_plot_long_sorted %>%
group_by(Environment, Gene) %>%
summarise(mean = mean(Abundance),
se = std.error(Abundance))
gene_hm_summary <- gene_plot_summary_sorted %>%
dplyr::select(-se) %>%
pivot_wider(names_from = Environment, values_from = mean) %>%
column_to_rownames(var = "Gene") %>%
t() %>%
as.data.frame() %>%
dplyr::select(stress_genes_sorted$KO) %>%
t() %>%
as.matrix()
rownames(gene_hm_summary) <- stress_genes_sorted$KOsymb
ann_rows <- data.frame(row.names = rownames(gene_hm_summary),
Stress = stress_genes_sorted$Stress)
ann_colors <- list(Stress = c("Alkaline pH" = viridis_pal()(17)[1],
"Cellular" = viridis_pal()(17)[2],
"Chlorine" = viridis_pal()(17)[3],
"Cold" = viridis_pal()(17)[4],
"Environmental" = viridis_pal()(17)[5],
"Environmental-Oxidative" = viridis_pal()(17)[6],
"General" = viridis_pal()(17)[7],
"Granule" = viridis_pal()(17)[8],
"Heat" = viridis_pal()(17)[9],
"Heat-Osmotic" = viridis_pal()(17)[10],
"High pH" = viridis_pal()(17)[11],
"Metal resistance-Zn" = viridis_pal()(17)[12],
"Osmotic" = viridis_pal()(17)[13],
"Osmotic, Low pH" = viridis_pal()(17)[14],
"Oxidative" = viridis_pal()(17)[15],
"pH" = viridis_pal()(17)[16],
"Starvation" = viridis_pal()(17)[17]))
phm1 <- pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.65),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
method = "ward.D2",
fontsize_row = 4,
annotation_row = ann_rows,
annotation_colors = ann_colors)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 12) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
save_pheatmap_pdf(phm1, "FigsUpdated/KO_heatmap_Stress_filtered.pdf")
levels(stress_genes$Stress)
levels(stress_genes_sorted$Stress)
View(stress_genes)
# Shortened list
ann_colors <- list(Stress = c("Cellular" = viridis_pal()(7)[1],
"Cold" = viridis_pal()(7)[2],
"General" = viridis_pal()(7)[3],
"Heat" = viridis_pal()(7)[4],
"Osmotic" = viridis_pal()(7)[5],
"Osmotic, Low pH" = viridis_pal()(7)[6],
"Oxidative" = viridis_pal()(7)[7]))
phm1 <- pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.65),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
method = "ward.D2",
fontsize_row = 4,
annotation_row = ann_rows,
annotation_colors = ann_colors)
phm1 <- pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.65),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
method = "ward.D2",
fontsize_row = 4,
gaps_row = c(1, 13, 23, 27, 37, 38),
annotation_row = ann_rows,
annotation_colors = ann_colors)
phm1 <- pheatmap(gene_hm_summary,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, 2.65),
legend_labels = c("-2", "-1", "0", "1", "2", "Abund."),
border_color = NA,
scale = "row",
show_colnames = T,
angle_col = 315,
cluster_rows = F,
cluster_cols = T,
method = "ward.D2",
fontsize_row = 5,
gaps_row = c(1, 13, 23, 27, 37, 38),
annotation_row = ann_rows,
annotation_colors = ann_colors)
save_pheatmap_pdf <- function(x, filename, width = 7, height = 12) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
save_pheatmap_pdf(phm1, "FigsUpdated/KO_heatmap_Stress_filtered.pdf")
