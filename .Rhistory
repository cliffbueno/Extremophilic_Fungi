plot_taxa_bars(tax_sum_Domain,
input$map_loaded,
type_header = "Environment",
num_taxa = 100,
data_only = F) +
theme_classic() +
labs(x = "Environment",
y = "Relative abundance",
fill = "Domain") +
theme(legend.position = "right",
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Range of % abundance in individual samples
range(tax_sum_Domain[3,]) # 0 to 0.636, so can be high in some samples
# Euks
euks <- tax_sum_Domain[3,]
plot_taxa_bars(euks,
input$map_loaded,
type_header = "Environment",
num_taxa = 100,
data_only = F) +
scale_fill_manual(values = c("grey")) +
theme_classic() +
labs(x = "Environment",
y = "Relative abundance") +
theme(legend.position = "none",
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
euks_t <- as.data.frame(t(euks))
input$map_loaded$Euks <- euks_t$Eukaryota
ggplot(input$map_loaded, aes(reorder(sampleID, Euks, mean), Euks, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
labs(x = NULL,
y = "Relative abundance") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Too many, filter top ones (> 5%), want to see which environments the top samples are from
eukabund <- data.frame("Euks" = input$map_loaded$Euks,
"sampleID" = input$map_loaded$sampleID) %>%
filter(Euks > 0.05) %>%
column_to_rownames(var = "sampleID")
topeuk <- filter_data(input,
filter_cat = "sampleID",
keep_vals = rownames(eukabund))
ggplot(topeuk$map_loaded, aes(reorder(sampleID, Euks, mean), Euks, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
geom_hline(yintercept = 0.05, linetype = "dashed") +
scale_y_continuous(expand = c(0.01, 0.01)) +
labs(x = NULL,
y = "Relative abundance") +
ggtitle("Samples with Eukaryota > 5% (n = 33)") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5))
#### __Check Fungi ####
# First do same as done above for euk but extract fungal phyla
tax_sum_phyla <- summarize_taxonomy(input, level = 2, report_higher_tax = T, relative = T)
fungal_phyla <- tax_sum_phyla[grep("Ascomycota|Basidiomycota|Blastocladiomycota|Chytridiomycota|
Cryptomycota|Microsporidia|Mucoromycota|Nephridiophagidae|Olpidiomycota|
Sanchytriomycota|Zoopagomycota", rownames(tax_sum_phyla)),]
fungal_phyla <- fungal_phyla[!grepl("Plasmid", rownames(fungal_phyla)),]
rownames(fungal_phyla) <- substring(rownames(fungal_phyla), 12)
plot_taxa_bars(fungal_phyla,
input$map_loaded,
type_header = "Environment",
num_taxa = 100,
data_only = F) +
geom_hline(yintercept = 0.01, linetype = "dashed", color = "grey") +
theme_classic() +
labs(x = "Environment",
y = "Relative abundance",
fill = "Phylum") +
theme(legend.position = "right",
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Get summed relative abundance of fungi and plot by sample and environment
input$map_loaded$Fungi <- colSums(fungal_phyla)
ggplot(input$map_loaded, aes(reorder(sampleID, Fungi, mean), Fungi, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
labs(x = NULL,
y = "Relative abundance") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Too many, filter top ones (> 1%), want to see which environments the top samples are from
funabund <- data.frame("Fungi" = input$map_loaded$Fungi,
"sampleID" = input$map_loaded$sampleID) %>%
filter(Fungi > 0.01) %>%
column_to_rownames(var = "sampleID")
topfun <- filter_data(input,
filter_cat = "sampleID",
keep_vals = rownames(funabund))
ggplot(topfun$map_loaded, aes(reorder(sampleID, Fungi, mean), Fungi, fill = Environment)) +
geom_bar(stat = "identity", color = NA) +
geom_hline(yintercept = 0.01, linetype = "dashed") +
scale_y_continuous(expand = c(0.01, 0.01)) +
labs(x = NULL,
y = "Relative abundance") +
ggtitle("Samples with Fungi > 1% (n = 38)") +
theme_classic() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5))
# By environment
hist(input$map_loaded$Fungi)
hist(log(input$map_loaded$Fungi))
leveneTest(input$map_loaded$Fungi ~ input$map_loaded$Environment) # Bad
m1 <- aov(Fungi ~ Environment, data = input$map_loaded)
shapiro.test(m1$residuals) # Bad
hist(m1$residuals)
plot(m1$fitted.values, m1$residuals)
summary(m1)
TukeyHSD(m1)
kruskal.test(Fungi ~ Environment, data = input$map_loaded)
nyi1 <- kwAllPairsNemenyiTest(Fungi ~ Environment, data = input$map_loaded)
nyi_table1 <- fullPTable(nyi1$p.value)
nyi_list1 <- multcompLetters(nyi_table1)
nyi_let1 <- as.data.frame(nyi_list1$Letters) %>%
mutate(label = `nyi_list1$Letters`,
y = rep(0.12, nrow(.))) %>%
rownames_to_column(var = "Environment")
ggplot(input$map_loaded, aes(reorder(Environment, Fungi, mean), Fungi)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1, alpha = 0.2, width = 0.4) +
geom_text(data = nyi_let1, aes(Environment, y, label = label),
size = 4, color = "black") +
labs(x = NULL, y = "Fungal relative abundance") +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
strip.text = element_text(size = 10))
# Explore
ggplot(input$map_loaded, aes(reorder(Environment, Fungi, mean), log(Fungi))) +
geom_violin(outlier.shape = NA) +
geom_boxplot(outlier.shape = NA, width = 0.1) +
geom_jitter(size = 1, alpha = 0.2, width = 0.4) +
geom_text(data = nyi_let1, aes(Environment, y, label = label),
size = 4, color = "black") +
labs(x = NULL, y = "Fungal relative abundance") +
ylim(-14, 0.1) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
strip.text = element_text(size = 10))
# Zero-inflated negative binomial?
# Can't use because numeric not integer
z1 <- zeroinfl(Fungi ~ Environment, data = input$map_loaded, dist = "negbin")
summary(z1)
# Zero-inflated Beta regression
d <- input$map_loaded # emmeans can't handle $
b1 <- gamlss(input$map_loaded$Fungi ~ d$Environment,  family = BEZI, trace = F)
summary(b1)
plot(b1)
emmeans(b1, "Environment", type = "response")
pairs(.Last.value)
tuk <- emmeans(object = b1, specs = "Environment") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "rich",
y = rep(11, nrow(.))) %>%
mutate(label = c("a", "a", "abc", "ab", "bc", "abc", "c", "abc", "bc"))
br_plot <- ggplot(input$map_loaded, aes(reorder(Environment, Fungi, median), Fungi*100,
colour = Environment)) +
geom_jitter(size = 2, alpha = 0.5, width = 0.4, shape = 16) +
geom_text(data = tuk, aes(Environment, y, label = label),
size = 4, color = "black", hjust = 0.5) +
labs(x = NULL, y = "Fungal % abund.") +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10)) +
scale_colour_manual(values = color_mapping) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
strip.text = element_text(size = 10))
br_plot
min(input$map_loaded$Fungi)
max(input$map_loaded$Fungi)
mean(input$map_loaded$Fungi)
se(input$map_loaded$Fungi)
#### __Filter ####
# Now filter to euk and then fungi (extract fungal phyla)
input_euk <- filter_taxa_from_input(input,
taxa_to_keep = "Eukaryota",
at_spec_level = 1)
# Check phyla
table(input_euk$taxonomy_loaded$taxonomy2)
# List of RefSeq fungal phyla
fungal_phyla_names <- c("Ascomycota", "Basidiomycota", "Blastocladiomycota",
"Chytridiomycota","Cryptomycota", "Microsporidia",
"Mucoromycota", "Nephridiophagidae", "Olpidiomycota",
"Sanchytriomycota", "Zoopagomycota")
input_fungi <- filter_taxa_from_input(input_euk,
taxa_to_keep = fungal_phyla_names,
at_spec_level = 2)
# Filter out plasmids (2 removed)
input_fungi <- filter_taxa_from_input(input_fungi,
taxa_to_remove = "Plasmid:Eukaryota",
at_spec_level = 1)
nrow(input$taxonomy_loaded) # 5943 total
nrow(input_euk$taxonomy_loaded) # 439 euks
nrow(input_fungi$taxonomy_loaded) # 326 fungi
# Now check reads again (not actually reads, but fungal assigned CDS counts)
sort(colSums(input_fungi$data_loaded))
# Note lots of samples with 0 or very few fungi
# Purposefully not filtering those out those as 0's are interesting in this analysis
# These are extreme environments, some may have few to no fungi
# Further below, however, some analyses will be done with zeroes removed
mean(colSums(input_fungi$data_loaded)) # 556.2304
se(colSums(input_fungi$data_loaded)) # 63.54668
input_fungi$map_loaded$fung_count <- colSums(input_fungi$data_loaded)
input_fungi$map_loaded$present <- ifelse(input_fungi$map_loaded$fung_count > 0,
1,
0)
# Note, will do this again but with CPM normalization
ggplot(input_fungi$map_loaded, aes(reorder(`Environment`, fung_count, mean), fung_count)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1.5, alpha = 0.25, width = 0.25) +
labs(x = "Environment",
y = "# Fungal Reads") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
ggplot(input_fungi$map_loaded, aes(GenomeSize, fung_count)) +
geom_point(size = 1.5, alpha = 0.25) +
geom_smooth(method = "lm") +
labs(x = "Assembled genome size",
y = "Assigned fungal gene count") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10))
# Get and plot fraction of samples with 0 versus > 0 fungal reads, and also n
env_prev <- input_fungi$map_loaded %>%
group_by(Environment) %>%
summarise(num_present = sum(present),
num_samples = n(),
prevalence = round(num_present/num_samples * 100, digits = 2)) %>%
mutate(num_absent = num_samples - num_present)
sum(env_prev$num_samples)
sum(env_prev$num_present)
# Melt for stacked bar
env_prev_long <- melt(env_prev,
id.vars = "Environment",
measure.vars = c("num_present", "num_absent"))
ggplot(env_prev, aes(reorder(Environment, prevalence, mean), prevalence)) +
geom_bar(stat = "identity") +
labs(x = NULL,
y = "% prevalence of fungi") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
ggplot(env_prev_long, aes(reorder(Environment, value, mean), value,
group = Environment, fill = variable)) +
geom_bar(stat = "identity") +
geom_text(data = env_prev,
aes(reorder(Environment, num_samples, mean), num_samples+10,
label = num_samples), inherit.aes = F) +
scale_fill_manual(values = c("#F8766D", "#619CFF"),
breaks = c("num_absent", "num_present"),
labels = c("Absent", "Present")) +
labs(x = NULL,
y = "Sample size",
fill = "Fungi") +
ggtitle("Total sample size = 855\nSamples with Fungi = 732") +
theme_bw() +
theme(legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank(),
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
#### ___Figure 1 ####
# Make multipanel Figure 1
# Update - make map a panel and move genome size to Figure S1
n <- ggplot(env_prev_long, aes(reorder(Environment, value, mean), value,
group = Environment, fill = variable)) +
geom_bar(stat = "identity") +
geom_text(data = env_prev,
aes(reorder(Environment, num_samples, mean), num_samples+15,
label = num_samples), inherit.aes = F) +
geom_text(aes(x = "Cryosphere - soil", y = 235, label = "total n = 855\nn with fungi = 732"),
hjust = 0.5, check_overlap = T, size = 3) +
scale_fill_manual(values = c("#F8766D", "#619CFF"),
breaks = c("num_absent", "num_present"),
labels = c("Absent", "Present")) +
labs(x = NULL,
y = "Sample size",
fill = "Fungi") +
theme_classic() +
theme(legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank(),
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank())
prev <- ggplot(env_prev, aes(reorder(Environment, num_samples, mean), prevalence,
fill = Environment)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = color_mapping) +
labs(x = NULL,
y = "Fungal % prev.") +
theme_classic() +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
f1bd <- plot_grid(n, prev, ncol = 1, rel_heights = c(0.4, 0.6), labels = c("B", "D"))
f1bd
f1ac <- plot_grid(fig1a, br_plot, ncol = 1, rel_heights = c(0.4, 0.6), align = "v",
labels = c("A", "C"))
f1ac
#### _CPM ####
input_fungi_CPM <- input_fungi
# Replace counts in "data_loaded" with CPM transformed counts
# This is CPM assembled metagenomic base pairs
# Do (count*1000000)/GenomeSize
# i is samples 1 to 1142
# j is taxa 1 to 304
for (i in 1:ncol(input_fungi$data_loaded)) {
for (j in 1:nrow(input_fungi$data_loaded)) {
input_fungi_CPM$data_loaded[j, i] <- (input_fungi$data_loaded[j, i]*1000000)/input_fungi$map_loaded$GenomeSize[i]
}
}
#### _Relative ####
# Remove zeroes (123 removed, 732 remaining)
countFun <- as.data.frame(sort(colSums(input_fungi_CPM$data_loaded))) %>%
filter(`sort(colSums(input_fungi_CPM$data_loaded))` == 0)
input_fungi_nz <- filter_data(input_fungi,
filter_cat = "sampleID",
filter_vals = rownames(countFun))
# Check Glacial Forefields (for Fusarium)
glac <- filter_data(input_fungi_nz,
filter_cat = "Environment",
keep_vals = "Glacial forefield")
# Check Glacial Forefields (for Fusarium)
source("~/Documents/GitHub/EastCoast/code/cliffplot_taxa_bars.R")
cliffplot_taxa_bars(input = glac, level = 6, variable = "taxon_oid")
cliffplot_taxa_bars(input = glac, level = 6, variable = "sampleID")
glac_rel <- filter_data(input_fungi_nz,
filter_cat = "Environment",
keep_vals = "Glacial forefield") # n = 51
glac_cpm <- filter_data(input_fungi_CPM,
filter_cat = "Environment",
keep_vals = "Glacial forefield") # n = 51
rm(glac)
cliffplot_taxa_bars(input = glac_cpm, level = 6, variable = "sampleID")
# Check most abundant genera
glac_rel_gen <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F)
View(glac_rel_gen)
# Check most abundant genera
glac_rel_gen <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F) %>%
mutate(mean = colMeans(.)) %>%
rownames_to_column(var = Genus) %>%
arrange(mean)
# Check most abundant genera
glac_rel_gen <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F) %>%
mutate(mean = rowMeans(.)) %>%
rownames_to_column(var = Genus) %>%
arrange(mean)
# Check most abundant genera
glac_rel_gen <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F) %>%
mutate(mean = rowMeans(.)) %>%
rownames_to_column(var = "Genus") %>%
arrange(mean)
View(glac_rel_gen)
# Check most abundant genera
glac_rel_gen <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F) %>%
mutate(mean = rowMeans(.)) %>%
rownames_to_column(var = "Genus") %>%
arrange(desc(mean)) %>%
dplyr::select(Genus, mean)
View(glac_rel_gen)
glac_cpm_gen <- summarize_taxonomy(input = glac_cpm, level = 6, report_higher_tax = F) %>%
mutate(mean = rowMeans(.)) %>%
rownames_to_column(var = "Genus") %>%
arrange(desc(mean)) %>%
dplyr::select(Genus, mean)
View(glac_cpm_gen)
glac_cpm_gen <- summarize_taxonomy(input = glac_cpm, level = 6, report_higher_tax = F) %>%
dplyr::select(-X3300011174, -X3300011176) %>%
mutate(mean = rowMeans(.)) %>%
rownames_to_column(var = "Genus") %>%
arrange(desc(mean)) %>%
dplyr::select(Genus, mean)
glac_cpm_gen <- summarize_taxonomy(input = glac_cpm, level = 6, report_higher_tax = F)
glac_cpm_gen <- summarize_taxonomy(input = glac_cpm, level = 6, report_higher_tax = F) %>%
dplyr::select(-X3300011174, -X3300011176) %>%
mutate(mean = rowMeans(.)) %>%
rownames_to_column(var = "Genus") %>%
arrange(desc(mean)) %>%
dplyr::select(Genus, mean)
View(glac_cpm_gen)
glac_cpm_gen <- summarize_taxonomy(input = glac_cpm, level = 6, relative = F, report_higher_tax = F) %>%
dplyr::select(-X3300011174, -X3300011176) %>%
mutate(mean = rowMeans(.)) %>%
rownames_to_column(var = "Genus") %>%
arrange(desc(mean)) %>%
dplyr::select(Genus, mean)
View(glac_cpm_gen)
# How many is Fusarium present in?
fus <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F) %>%
filter(rownames(.) == "Fusarium")
View(fus)
# How many is Fusarium present in?
fus <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F) %>%
filter(rownames(.) == "Fusarium") %>%
t() %>%
as.data.frame()
# How many is Fusarium present in?
fus <- summarize_taxonomy(input = glac_rel, level = 6, report_higher_tax = F) %>%
filter(rownames(.) == "Fusarium") %>%
t() %>%
as.data.frame()
View(fus)
sum(fus$Fusarium > 0)
cliffplot_taxa_bars(input = glac_cpm, level = 6, variable = "Isolation.Country")
cliffplot_taxa_bars(input = glac_cpm, level = 6, variable = "StudyName")
cliffplot_taxa_bars(input = glac_cpm, level = 6, variable = "Study.Name")
# This agrees with Table 2.
plot_taxa_bars(glac_cpm_gen,
metadata_map = glac_cpm,
type_header = "sampleID",
num_taxa = 10,
data_only = F)
# This agrees with Table 2.
glac_cpm_gen <- summarize_taxonomy(input = glac_cpm, level = 6, relative = F, report_higher_tax = F)
plot_taxa_bars(glac_cpm_gen,
metadata_map = glac_cpm,
type_header = "sampleID",
num_taxa = 10,
data_only = F)
plot_taxa_bars(glac_cpm_gen,
metadata_map = glac_cpm$map_loaded,
type_header = "sampleID",
num_taxa = 10,
data_only = F)
cliffplot_taxa_bars(input = glac_cpm, level = 6, variable = "sampleID")
plot_taxa_bars(glac_cpm_gen,
metadata_map = glac_cpm$map_loaded,
type_header = "sampleID",
num_taxa = 10,
data_only = F)
plot_taxa_bars(glac_cpm_gen,
metadata_map = glac_cpm$map_loaded,
type_header = "sampleID",
num_taxa = 10,
data_only = F) +
theme_classic() +
theme(axis.text.x = element_text(size = 4, angle = 45, hjust = 1))
plot_taxa_bars(glac_cpm_gen,
metadata_map = glac_cpm$map_loaded,
type_header = "sampleID",
num_taxa = 10,
data_only = F) +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(axis.text.x = element_text(size = 4, angle = 45, hjust = 1))
plot_taxa_bars(glac_cpm_gen,
metadata_map = glac_cpm$map_loaded,
type_header = "sampleID",
num_taxa = 12,
data_only = F) +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(axis.text.x = element_text(size = 4, angle = 45, hjust = 1))
#### _Start here ####
ko_comm_DESeq <- readRDS("data/ko_comm_DESeq_updated2.rds")
ko_meta <- readRDS("data/ko_meta_final.rds")
table(ko_meta$Environment)
#stress_genes <- stress_genes %>%
#  dplyr::select(-Symbol, -Name, -Protein) %>%
#  separate(Definition, into = c("Symbol", "Name"), sep = ";", remove = F) %>%
#  dplyr::select(KO, Definition, Symbol, Name, Stress, Notes)
#write.csv(stress_genes, file = "stress_genes_wDef.csv", row.names = F)
stress_genes <- read.csv("data/stress_genes_wDef.csv") %>%
filter(KO %in% colnames(ko_comm_DESeq)) %>%
filter(!duplicated(KO))
# Note 158 of 208 KOs are in the dataset
# Note 2 were duplicates. So there are 157 KOs
not_present <- read.csv("data/stress_genes_wDef.csv") %>%
filter(KO %notin% colnames(ko_comm_DESeq)) %>%
filter(!duplicated(KO))
# Updated file annotated by Lara
# From 157, filtered to 56
stress_genes <- read.csv("data/stress_genes_sorted_5.19.23_LV.csv") %>%
filter(Notes == "ok")
# Data frame
gene_plot <- ko_comm_DESeq %>%
dplyr::select(stress_genes$KO) %>%
mutate("Environment" = ko_meta$Environment)
View(stress_genes)
View(stress_genes)
# Updated file annotated by Lara
# From 157, filtered to 56
stress_genes <- read.csv("data/stress_genes_sorted_5.19.23_LV.csv") %>%
filter(Notes == "ok") %>%
dplyr::select(-Notes, -X)
View(stress_genes)
# Table S5
write_xlsx(stress_genes, path = "data/TableS5.xlsx", format_headers = F)
