"IDBA_1.1.1 PRE_correction" = "IDBA",
"IDBA_UD" = "IDBA_UD",
"idba_ud 1.1.1" = "IDBA_UD",
"IDBA_UD k52-k92 step10" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs greater than or equal to 1kb and less than 4kb" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs greater than or equal to 4kb" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs less than 1kb" = "IDBA_UD",
"idba_ud v 1.1.1" = "IDBA_UD",
"idba_ud v. 1.1.1" = "IDBA_UD",
"IDBA_UD v. 1.1.1" = "IDBA_UD",
"IDBA-UD" = "IDBA_UD",
"IDBA-UD 1.1.3" = "IDBA_UD",
"IDBA-ud v. 1.1.1" = "IDBA_UD",
"IDBA-UD v. 1.1.1" = "IDBA_UD",
"idba.1.1.1" = "IDBA",
"lucy / pga" = "Multiple",
"Megahit" = "MEGAHIT",
"MEGAHit" = "MEGAHIT",
"MegaHit v. 1.02" = "MEGAHIT",
"MEGAHIT v. 1.1.1" = "MEGAHIT",
"megahit v. 1.1.3" = "MEGAHIT",
"Megahit v. 1.1.3" = "MEGAHIT",
"MegaHIT v. 1.2.9" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v0.2.0" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v1.0.3" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v1.0.6" = "MEGAHIT",
"MEGAHIT v.1.0.3" = "MEGAHIT",
"MEGAN" = "MEGAN",
"metaSPAdes" = "metaSPAdes",
"metaSPAdes v. 3.10.0" = "metaSPAdes",
"metaspades v. 3.13.0" = "metaSPAdes",
"metaspades v. 3.14.1" = "metaSPAdes",
"metaSPAdes v. 3.7.1" = "metaSPAdes",
"metaSPAdes v3.10, CLC genomic workbench v7.5.1" = "metaSPAdes",
"metaSPAdes v3.10.1" = "metaSPAdes",
"Metavelvet" = "MetaVelvet",
"MetaVelvet - v1.2.01" = "MetaVelvet",
"MetaVelvet 1.2.02" = "MetaVelvet",
"metavelvet v. 1.2.02" = "MetaVelvet",
"Metavelvet v. 1.2.02" = "MetaVelvet",
"mira 3.0.4" = "MIRA",
"MIRA 4.9.5_2" = "MIRA",
"Newbler" = "Newbler",
"Newbler and/or Velvet" = "Multiple",
"Newbler v. 2.5" = "Newbler",
"Newbler v. 2.5.3" = "Newbler",
"Newbler v2.7" = "Newbler",
"pga" = "PGA",
"Ray 2.3.1" = "Ray",
"Ray 2.3.1 (no min length)" = "Ray",
"reassembled with IDBA_UD" = "IDBA_UD",
"reassembly by IDBA-UD" = "IDBA_UD",
"reassembly with IDBA_UD" = "IDBA_UD",
"reassembly with IDBA-UD" = "IDBA_UD",
"SAPDES" = "SPAdes",
"Soap denovo and minimus" = "Multiple",
"SOAPdenovo v2.04" = "SOAPdenovo",
"SOAPdenovo,newbler,minimus2 v. Version 1.05: testing... 2010,(v2.8 (20120726_1306)),AMOS/3.1.0" = "SOAPdenovo",
"Spades" = "SPAdes",
"SPADES" = "SPAdes",
"spades 3.0" = "SPAdes",
"Spades 3.6.1" = "SPAdes",
"SPAdes 3.7.1" = "SPAdes",
"SPAdes 3.8.0" = "SPAdes",
"Spades v. 3.10" = "SPAdes",
"SPAdes v. 3.11.0" = "SPAdes",
"spades v. 3.11.1" = "SPAdes",
"Spades v. 3.11.1" = "SPAdes",
"SPAdes v. 3.11.1" = "SPAdes",
"spades v. 3.12.0" = "SPAdes",
"Spades v. 3.12.0" = "SPAdes",
"spades v. 3.13.0" = "SPAdes",
"SPades v. 3.13.0" = "SPAdes",
"SPAdes v. 3.6.0" = "SPAdes",
"SPAdes v. 3.9.0" = "SPAdes",
"spades v. SPAdes version: 3.10.1" = "SPAdes",
"spades v. SPAdes version: 3.11.1-check" = "SPAdes",
"SPADES v3.6.1" = "SPAdes",
"Spades_3.6" = "SPAdes",
"SPAdes3.1.0" = "SPAdes",
"Unkown" = "Unknown",
"Velvet" = "Velvet",
"Velvet + MetaVelvet at multiple Kmers" = "Multiple",
"Velvet + MetaVelvet at multiple Kmers followed by Minimus2 on all assemblies" = "Multiple",
"Velvet, MetaVelvet, Minimus" = "Multiple")
levels(input_fungi_CPM_nz$map_loaded$Assembler)
input_fungi_CPM_nz <- filter_data(input_fungi_CPM,
filter_cat = "sampleID",
filter_vals = rownames(countFun))
# Year
# Need to make new column for year or time periods
# Also fix blank cells in assembly method
input_fungi_CPM_nz$map_loaded$Assembly.Method[input_fungi_CPM_nz$map_loaded$Assembly.Method==""] <- "Unknown"
input_fungi_CPM_nz$map_loaded <- input_fungi_CPM_nz$map_loaded %>%
separate(Add.Date, into = c("Year", "Month", "Day"), sep = "-", remove = F) %>%
mutate_if(is.character, as.factor)
levels(input_fungi_CPM_nz$map_loaded$Assembly.Method)
# Assembly method
# Need to make new column for method type or multiple or unknown
input_fungi_CPM_nz$map_loaded$Assembler <- dplyr::recode_factor(input_fungi_CPM_nz$map_loaded$Assembly.Method,
"AbySS v1.5.0" = "AbySS",
"canu v. 1.7" = "Canu",
"canu v. 1.9" = "Canu",
"Celera WGS Assembler v5.3" = "Celera",
"Celera, Phrap" = "Multiple",
"CLC Bio package" = "CLC",
"CLC Genomics" = "CLC",
"CLC genomics wb7" = "CLC",
"CLC genomics workbench" = "CLC",
"CLC genomics workbench, v. 7.0" = "CLC",
"Custom JGI assembly, Nielsen et. al." = "Custom JGI",
"Custom JGI assembly." = "Custom JGI",
"IDBA" = "IDBA",
"IDBA 1.1.1 PRE correction" = "IDBA",
"idba v. 1.1.1" = "IDBA",
"IDBA v. 1.1.1" = "IDBA",
"IDBA_1.1.1 PRE_correction" = "IDBA",
"IDBA_UD" = "IDBA_UD",
"idba_ud 1.1.1" = "IDBA_UD",
"IDBA_UD k52-k92 step10" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs greater than or equal to 1kb and less than 4kb" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs greater than or equal to 4kb" = "IDBA_UD",
"IDBA_UD k52-k92 step10 - contigs less than 1kb" = "IDBA_UD",
"idba_ud v 1.1.1" = "IDBA_UD",
"idba_ud v. 1.1.1" = "IDBA_UD",
"IDBA_UD v. 1.1.1" = "IDBA_UD",
"IDBA-UD" = "IDBA_UD",
"IDBA-UD 1.1.3" = "IDBA_UD",
"IDBA-ud v. 1.1.1" = "IDBA_UD",
"IDBA-UD v. 1.1.1" = "IDBA_UD",
"idba.1.1.1" = "IDBA",
"lucy / pga" = "Multiple",
"Megahit" = "MEGAHIT",
"MEGAHit" = "MEGAHIT",
"MegaHit v. 1.02" = "MEGAHIT",
"MEGAHIT v. 1.1.1" = "MEGAHIT",
"megahit v. 1.1.3" = "MEGAHIT",
"Megahit v. 1.1.3" = "MEGAHIT",
"MegaHIT v. 1.2.9" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v0.2.0" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v1.0.3" = "MEGAHIT",
"MEGAHIT v. MEGAHIT v1.0.6" = "MEGAHIT",
"MEGAHIT v.1.0.3" = "MEGAHIT",
"MEGAN" = "MEGAN",
"metaSPAdes" = "metaSPAdes",
"metaSPAdes v. 3.10.0" = "metaSPAdes",
"metaspades v. 3.13.0" = "metaSPAdes",
"metaspades v. 3.14.1" = "metaSPAdes",
"metaSPAdes v. 3.7.1" = "metaSPAdes",
"metaSPAdes v3.10, CLC genomic workbench v7.5.1" = "metaSPAdes",
"metaSPAdes v3.10.1" = "metaSPAdes",
"Metavelvet" = "MetaVelvet",
"MetaVelvet - v1.2.01" = "MetaVelvet",
"MetaVelvet 1.2.02" = "MetaVelvet",
"metavelvet v. 1.2.02" = "MetaVelvet",
"Metavelvet v. 1.2.02" = "MetaVelvet",
"mira 3.0.4" = "MIRA",
"MIRA 4.9.5_2" = "MIRA",
"Newbler" = "Newbler",
"Newbler and/or Velvet" = "Multiple",
"Newbler v. 2.5" = "Newbler",
"Newbler v. 2.5.3" = "Newbler",
"Newbler v2.7" = "Newbler",
"pga" = "PGA",
"Ray 2.3.1" = "Ray",
"Ray 2.3.1 (no min length)" = "Ray",
"reassembled with IDBA_UD" = "IDBA_UD",
"reassembly by IDBA-UD" = "IDBA_UD",
"reassembly with IDBA_UD" = "IDBA_UD",
"reassembly with IDBA-UD" = "IDBA_UD",
"SAPDES" = "SPAdes",
"Soap denovo and minimus" = "Multiple",
"SOAPdenovo v2.04" = "SOAPdenovo",
"SOAPdenovo,newbler,minimus2 v. Version 1.05: testing... 2010,(v2.8 (20120726_1306)),AMOS/3.1.0" = "SOAPdenovo",
"Spades" = "SPAdes",
"SPADES" = "SPAdes",
"spades 3.0" = "SPAdes",
"Spades 3.6.1" = "SPAdes",
"SPAdes 3.7.1" = "SPAdes",
"SPAdes 3.8.0" = "SPAdes",
"Spades v. 3.10" = "SPAdes",
"SPAdes v. 3.11.0" = "SPAdes",
"spades v. 3.11.1" = "SPAdes",
"Spades v. 3.11.1" = "SPAdes",
"SPAdes v. 3.11.1" = "SPAdes",
"spades v. 3.12.0" = "SPAdes",
"Spades v. 3.12.0" = "SPAdes",
"spades v. 3.13.0" = "SPAdes",
"SPades v. 3.13.0" = "SPAdes",
"SPAdes v. 3.6.0" = "SPAdes",
"SPAdes v. 3.9.0" = "SPAdes",
"spades v. SPAdes version: 3.10.1" = "SPAdes",
"spades v. SPAdes version: 3.11.1-check" = "SPAdes",
"SPADES v3.6.1" = "SPAdes",
"Spades_3.6" = "SPAdes",
"SPAdes3.1.0" = "SPAdes",
"Unknown" = "Unknown",
"Unkown" = "Unknown",
"Velvet" = "Velvet",
"Velvet + MetaVelvet at multiple Kmers" = "Multiple",
"Velvet + MetaVelvet at multiple Kmers followed by Minimus2 on all assemblies" = "Multiple",
"Velvet, MetaVelvet, Minimus" = "Multiple")
table(input_fungi_CPM_nz$map_loaded$Year)
levels(input_fungi_CPM_nz$map_loaded$Assembler)
table(input_fungi_CPM_nz$map_loaded$Assembler)
set.seed(1150)
adonis2(bc ~ Assembly.Method, data = input_fungi_CPM_nz$map_loaded) # R2 = 0.34, p = 0.001
set.seed(1150)
adonis2(bc ~ Assembler, data = input_fungi_CPM_nz$map_loaded) # R2 = 0.34, p = 0.001
anova(betadisper(bc, input_fungi_CPM_nz$map_loaded$Assembler)) # Dispersion not homogeneous
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Assembler"), find_hull)
g_assem <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Assembler, fill = Assembler),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 0.5, aes(colour = Assembler),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Assembler: R2 = 0.12") +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_assem
input_fungi_CPM_nz$map_loaded$Axis01 <- scores(pcoa)[,1]
input_fungi_CPM_nz$map_loaded$Axis02 <- scores(pcoa)[,2]
g_assem <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Assembler, fill = Assembler),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 0.5, aes(colour = Assembler),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Assembler: R2 = 0.12") +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_assem
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Assembler"), find_hull)
g_assem <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Assembler, fill = Assembler),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 0.5, aes(colour = Assembler),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Assembler: R2 = 0.12") +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_assem
plot_grid(g_year, g_assem, align = "hv", ncol = 2)
pdf("Figs/PCoA_Year_Assembler.pdf", width = 8.5, height = 3.5)
plot_grid(g_year, g_assem, align = "hv", ncol = 2)
dev.off()
pdf("Figs/PCoA_Year_Assembler.pdf", width = 9, height = 6)
plot_grid(g_year, g_assem, align = "hv", ncol = 2)
dev.off()
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Year"), find_hull)
g_year <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Year, fill = Year),
alpha = 0.1, show.legend = F) +
geom_point(size = 2, alpha = 0.5, aes(colour = Year),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Year: R2 = 0.13") +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_year
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Assembler"), find_hull)
g_assem <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Assembler, fill = Assembler),
alpha = 0.1, show.legend = F) +
geom_point(size = 2, alpha = 0.5, aes(colour = Assembler),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Assembler: R2 = 0.12") +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_assem
pdf("Figs/PCoA_Year_Assembler.pdf", width = 9, height = 5)
plot_grid(g_year, g_assem, align = "hv", ncol = 2)
dev.off()
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Year"), find_hull)
g_year <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Year, fill = Year),
alpha = 0.1, show.legend = F) +
geom_point(size = 2, alpha = 0.5, aes(colour = Year),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Year: R2 = 0.13") +
theme_bw() +
theme(legend.position = "right",
legend.key.size = unit(0.25, "cm"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_year
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Assembler"), find_hull)
g_assem <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Assembler, fill = Assembler),
alpha = 0.1, show.legend = F) +
geom_point(size = 2, alpha = 0.5, aes(colour = Assembler),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Assembler: R2 = 0.12") +
theme_bw() +
theme(legend.position = "right",
legend.key.size = unit(0.25, "cm"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_assem
pdf("Figs/PCoA_Year_Assembler.pdf", width = 9, height = 4)
plot_grid(g_year, g_assem, align = "hv", ncol = 2)
dev.off()
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Assembler"), find_hull)
g_assem <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Assembler, fill = Assembler),
alpha = 0.1, show.legend = F) +
geom_point(size = 2, alpha = 0.5, aes(colour = Assembler),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Assembler: R2 = 0.12") +
theme_bw() +
theme(legend.position = "right",
legend.key.size = unit(0.3, "cm"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_assem
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Year"), find_hull)
g_year <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Year, fill = Year),
alpha = 0.1, show.legend = F) +
geom_point(size = 2, alpha = 0.5, aes(colour = Year),
show.legend = T) +
labs(x = "PC1: 12.1%",
y = "PC2: 9.2%") +
ggtitle("Year: R2 = 0.13") +
theme_bw() +
theme(legend.position = "right",
legend.key.size = unit(0.3, "cm"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(vjust = -1))
g_year
pdf("Figs/PCoA_Year_Assembler.pdf", width = 9, height = 4)
plot_grid(g_year, g_assem, align = "hv", ncol = 2)
dev.off()
# Get these columns and sample ID to add to any metadata
methods <- input_fungi_CPM_nz$map_loaded %>%
dplyr::select(sampleID, Year, Assembler)
ko_meta <- input_fungi$map_loaded %>%
filter(taxon_oid %in% rownames(ko_comm)) %>%
arrange(taxon_oid) %>%
left_join(., methods, by = "sampleID")
# Also do with the same subset of the data as taxonomy (26 samples from each env)
# Note numbers are slightly different here because of 0 fungal KOs in some samples
ko_meta_subset26 <- ko_meta %>%
filter(sampleID %in% subset26$sampleID)
ko_comm_DESeq_subset26 <- ko_comm_DESeq %>%
filter(rownames(.) %in% rownames(ko_meta_subset26))
sum(rownames(ko_comm_DESeq_subset26) != rownames(ko_meta_subset26))
table(ko_meta_subset26$Environment)
bc_ko <- vegdist(ko_comm_DESeq_subset26, method = "bray")
pcoa_ko <- cmdscale(bc_ko, k = nrow(ko_meta_subset26) - 1, eig = T)
pcoaA1 <- round((eigenvals(pcoa_ko)/sum(eigenvals(pcoa_ko)))[1]*100, digits = 1)
rownames(ko_meta_subset26)
View(ko_meta)
set.seed(308)
adonis2(jac_ko ~ ko_meta_subset26$Assembler) # R2 = 0.12, p = 0.002
anova(betadisper(jac_ko, ko_meta_subset26$Assembler)) # Dispersion not homogeneous
set.seed(308)
adonis2(jac_ko ~ ko_meta_subset26$Year) # R2 = 0.12, p = 0.002
anova(betadisper(jac_ko, ko_meta_subset26$Year)) # Dispersion not homogeneous
set.seed(308)
adonis2(bc_ko ~ ko_meta_subset26$Assembler) # R2 = 0.13, p = 0.002
View(ko_comm_DESeq)
ko_meta <- input_fungi$map_loaded %>%
filter(taxon_oid %in% rownames(ko_comm)) %>%
arrange(taxon_oid) %>%
left_join(., methods, by = "sampleID") %>%
mutate(rn = sampleID) %>%
column_to_rownames(var = "rn")
# Check match (should be zero)
sum(rownames(ko_comm) != ko_meta$taxon_oid)
# Check environment sample size
table(ko_meta$Environment)
# Get richness and Shannon
ko_meta$richness_KO = specnumber(ko_comm)
ko_meta$shannon_KO = diversity(ko_comm, index = "shannon")
range(ko_meta$richness_KO)
range(ko_meta$shannon_KO)
# Also do with the same subset of the data as taxonomy (26 samples from each env)
# Note numbers are slightly different here because of 0 fungal KOs in some samples
ko_meta_subset26 <- ko_meta %>%
filter(sampleID %in% subset26$sampleID)
ko_comm_DESeq_subset26 <- ko_comm_DESeq %>%
filter(rownames(.) %in% rownames(ko_meta_subset26))
sum(rownames(ko_comm_DESeq_subset26) != rownames(ko_meta_subset26))
table(ko_meta_subset26$Environment)
bc_ko <- vegdist(ko_comm_DESeq_subset26, method = "bray")
pcoa_ko <- cmdscale(bc_ko, k = nrow(ko_meta_subset26) - 1, eig = T)
pcoaA1 <- round((eigenvals(pcoa_ko)/sum(eigenvals(pcoa_ko)))[1]*100, digits = 1)
pcoaA2 <- round((eigenvals(pcoa_ko)/sum(eigenvals(pcoa_ko)))[2]*100, digits = 1)
ko_meta_subset26$Axis01 <- scores(pcoa_ko)[,1]
ko_meta_subset26$Axis02 <- scores(pcoa_ko)[,2]
set.seed(308)
adonis2(bc_ko ~ ko_meta_subset26$Assembler) # R2 = 0.13, p = 0.002
anova(betadisper(bc_ko, ko_meta_subset26$Assembler)) # Dispersion not homogeneous
set.seed(308)
adonis2(bc_ko ~ ko_meta_subset26$Year) # R2 = 0.07, p = 0.002
anova(betadisper(bc_ko, ko_meta_subset26$Year)) # Dispersion not homogeneous
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(Year)) %>%
filter(Year > 2015)
table(n_test)
table(n_test$Environment)
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(Year))
str(n_test)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2015)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2014)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2013)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2012)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2011)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2010)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2011)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2012)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2011)
table(n_test$Environment)
# Given that these factors have higher R2 than environment, we will likely want to remove some of the older data and perhaps keep only a subset of assembly methods
# Check environment sizes by Year and Assembler subsets
# Soda Lake had least n, all 26 were after 2012 though
n_test <- input_fungi_CPM_nz$map_loaded %>%
mutate(Year = as.integer(as.character(Year))) %>%
filter(Year > 2011) %>%
droplevels()
levels(n_test$Assembler)
table(n_test$Assembler)
