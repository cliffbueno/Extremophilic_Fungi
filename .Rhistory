geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 1.5, alpha = 0.25, width = 0.25) +
labs(x = "Environment",
y = "# Fungal Reads") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
# Check genome size vs fungal genus reads
pdf("Figs/AssembledMetagenomeSizes_FungalGenusReads.pdf", width = 7, height = 5)
ggplot(input_fungi$map_loaded, aes(Genome.Size.....assembled, fung_count)) +
geom_point(size = 1.5, alpha = 0.25) +
geom_smooth(method = "lm") +
labs(x = "Assembled genome size",
y = "Assigned fungal genus reads") +
theme_bw() +
theme(axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10))
dev.off()
# Get and plot fraction of samples with 0 versus > 0 fungal reads, and also n
env_prev <- input_fungi$map_loaded %>%
group_by(Environment) %>%
summarise(num_present = sum(present),
num_samples = n(),
prevalence = round(num_present/num_samples * 100, digits = 2)) %>%
mutate(num_absent = num_samples - num_present)
# Melt for stacked bar
env_prev_long <- melt(env_prev,
id.vars = "Environment",
measure.vars = c("num_present", "num_absent"))
pdf("Figs/FungalPrevalence.pdf", width = 5, height = 4)
ggplot(env_prev, aes(reorder(Environment, prevalence, mean), prevalence)) +
geom_bar(stat = "identity") +
labs(x = NULL,
y = "% prevalence of fungi") +
theme_bw() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
dev.off()
pdf("Figs/SampleSize.pdf", width = 5, height = 4.5)
ggplot(env_prev_long, aes(reorder(Environment, value, mean), value,
group = Environment, fill = variable)) +
geom_bar(stat = "identity") +
geom_text(data = env_prev,
aes(reorder(Environment, num_samples, mean), num_samples+10,
label = num_samples), inherit.aes = F) +
scale_fill_manual(values = c("#F8766D", "#619CFF"),
breaks = c("num_absent", "num_present"),
labels = c("Absent", "Present")) +
labs(x = NULL,
y = "Sample size",
fill = "Fungi") +
ggtitle("Total sample size = 1131\nSamples with Fungi = 925") +
theme_bw() +
theme(legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank(),
axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
dev.off()
#### _CPM ####
input_fungi_CPM <- input_fungi
# Replace counts in "data_loaded" with CPM transformed counts
# This is CPM assembled metagenomic reads
# Do (count*1000000)/GenomeSize
# i is samples 1 to 1131
# j is taxa 1 to 303
for (i in 1:ncol(input_fungi$data_loaded)) {
for (j in 1:nrow(input_fungi$data_loaded)) {
input_fungi_CPM$data_loaded[j, i] <- (input_fungi$data_loaded[j, i]*1000000)/input_fungi$map_loaded$GenomeSize[i]
}
}
# Make stacked bar plots by taxonomic level
# Resort so unassigned and other are on the top
# Use "Paired" palette from RColorBrewer
# Note: "Set2" palette could be another option
# Unassigned gets grey75, Other gets grey90
# Show all phyla; for others show top 15 - use colorRampPalette to expand colors
# Can easily update this later if people want a different number of taxa shown
ntax <- 15
mycolors <- colorRampPalette(brewer.pal(12, "Paired"))(ntax)
# Phyla
tax_sum_Phyla <- summarize_taxonomy(input_fungi_CPM, level = 2, report_higher_tax = F, relative = F)
barsPhyla <- plot_taxa_bars(tax_sum_Phyla,
input_fungi_CPM$map_loaded,
type_header = "Environment",
num_taxa = ntax,
data_only = T) %>%
mutate(taxon = fct_rev(taxon))
ggplot(barsPhyla, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Phylum") +
scale_fill_manual(values = brewer.pal(12, "Paired")[7:1]) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"))
ggplot(barsPhyla, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Phylum") +
scale_fill_manual(values = brewer.pal(12, "Paired")[7:1]) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.2, unit = "cm"))
ggplot(barsPhyla, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Phylum") +
scale_fill_manual(values = brewer.pal(12, "Paired")[7:1]) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.3, unit = "cm"))
pdf("Figs/CPM_Phyla.pdf", width = 7, height = 5)
ggplot(barsPhyla, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Phylum") +
scale_fill_manual(values = brewer.pal(12, "Paired")[7:1]) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.3, unit = "cm"))
dev.off()
pdf("Figs/CPM_Phyla.pdf", width = 7, height = 5)
ggplot(barsPhyla, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Phylum") +
scale_fill_manual(values = brewer.pal(12, "Paired")[7:1]) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.5, unit = "cm"))
dev.off()
# Class
tax_sum_Class <- summarize_taxonomy(input_fungi_CPM, level = 3, report_higher_tax = T, relative = F)
rownames(tax_sum_Class) <- substring(rownames(tax_sum_Class), 12)
plot_taxa_bars(tax_sum_Class,
input_fungi_CPM$map_loaded,
type_header = "Environment",
num_taxa = nrow(tax_sum_Class),
data_only = F) +
theme_classic() +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Class") +
theme(legend.position = "right",
axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
tax_sum_Class <- summarize_taxonomy(input_fungi_CPM, level = 3, report_higher_tax = F, relative = F)
barsClass <- plot_taxa_bars(tax_sum_Class,
input_fungi_CPM$map_loaded,
type_header = "Environment",
num_taxa = ntax,
data_only = T) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_rev(taxon))
pdf("Figs/CPM_Class.pdf", width = 7, height = 5)
ggplot(barsClass, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Class") +
scale_fill_manual(values = c("grey90", mycolors[15:1])) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.5, unit = "cm"))
dev.off()
# Order
tax_sum_Order <- summarize_taxonomy(input_fungi_CPM, level = 4, report_higher_tax = F, relative = F)
barsOrder <- plot_taxa_bars(tax_sum_Order,
input_fungi_CPM$map_loaded,
type_header = "Environment",
num_taxa = ntax,
data_only = T) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_relevel(taxon, "unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon))
pdf("Figs/CPM_Order.pdf", width = 7, height = 5)
ggplot(barsOrder, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Order") +
scale_fill_manual(values = c("grey75", "grey90", mycolors[14:1])) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.5, unit = "cm"))
dev.off()
# Family
tax_sum_Family <- summarize_taxonomy(input_fungi_CPM, level = 5, report_higher_tax = F, relative = F)
barsFamily <- plot_taxa_bars(tax_sum_Family,
input_fungi_CPM$map_loaded,
type_header = "Environment",
num_taxa = ntax,
data_only = T) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_relevel(taxon, "unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon))
pdf("Figs/CPM_Family.pdf", width = 7, height = 5)
ggplot(barsFamily, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Family") +
scale_fill_manual(values = c("grey75", "grey90", mycolors[14:1])) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.5, unit = "cm"))
dev.off()
# Genus
tax_sum_Genus <- summarize_taxonomy(input_fungi_CPM, level = 6, report_higher_tax = F, relative = F)
barsGenus <- plot_taxa_bars(tax_sum_Genus,
input_fungi_CPM$map_loaded,
type_header = "Environment",
num_taxa = ntax,
data_only = T) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
# mutate(taxon = fct_relevel(taxon, "unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon))
pdf("Figs/CPM_Genus.pdf", width = 7, height = 5)
ggplot(barsGenus, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Environment", y = "Abundance (CPM)", fill = "Genus") +
scale_fill_manual(values = c("grey90", mycolors[15:1])) +
scale_y_continuous(expand = c(0.01, 0.01)) +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
legend.text = element_text(size = 8),
legend.key.size = unit(0.5, "cm"),
plot.margin = margin(0.1, 0.1, 0.1, 0.5, unit = "cm"))
dev.off()
#### _Relative ####
# Remove zeroes (206 removed, 925 remaining)
countFun <- as.data.frame(sort(colSums(input_fungi_CPM$data_loaded))) %>%
filter(`sort(colSums(input_fungi_CPM$data_loaded))` == 0)
input_fungi_nz <- filter_data(input_fungi,
filter_cat = "sampleID",
filter_vals = rownames(countFun))
input_fungi_nz$map_loaded$Study.Name <- as.factor(input_fungi_nz$map_loaded$Study.Name)
levels(input_fungi_nz$map_loaded$Environment)
# Filter out fungal zeroes from CPM data (filters 206 samples, 925 remaining)
input_fungi_CPM_nz <- filter_data(input_fungi_CPM,
filter_cat = "sampleID",
filter_vals = rownames(countFun))
Phylum_nz <- summarize_taxonomy(input_fungi_CPM_nz, level = 2, report_higher_tax = F, relative = F)
Class_nz <- summarize_taxonomy(input_fungi_CPM_nz, level = 3, report_higher_tax = F, relative = F)
Order_nz <- summarize_taxonomy(input_fungi_CPM_nz, level = 4, report_higher_tax = F, relative = F)
Family_nz <- summarize_taxonomy(input_fungi_CPM_nz, level = 5, report_higher_tax = F, relative = F)
# Do at each taxonomic level
# Genus (lowest level)
bc <- calc_dm(input_fungi_CPM_nz$data_loaded)
# Archaea
input_arc <- filter_taxa_from_input(input,
taxa_to_keep = "Archaea",
at_spec_level = 1)
nrow(input_arc$data_loaded) # 150
input_arc_CPM <- input_arc
for (i in 1:ncol(input_arc$data_loaded)) {
for (j in 1:nrow(input_arc$data_loaded)) {
input_arc_CPM$data_loaded[j, i] <- (input_arc$data_loaded[j, i]*1000000)/input_arc$map_loaded$GenomeSize[i]
}
}
# Remove zeroes
countArc <- as.data.frame(sort(colSums(input_arc_CPM$data_loaded))) %>%
filter(`sort(colSums(input_arc_CPM$data_loaded))` == 0)
input_arc_CPM_nz <- filter_data(input_arc_CPM,
filter_cat = "sampleID",
filter_vals = rownames(countArc))
# BC, PERMANOVA, PERMDISP, PCoA
bc_arc <- calc_dm(input_arc_CPM_nz$data_loaded)
pcoa_arc <- cmdscale(bc_arc, k = nrow(input_arc_CPM_nz$map_loaded) - 1, eig = T)
pcoaA1arc <- round((eigenvals(pcoa_arc)/sum(eigenvals(pcoa_arc)))[1]*100, digits = 1)
pcoaA2arc <- round((eigenvals(pcoa_arc)/sum(eigenvals(pcoa_arc)))[2]*100, digits = 1)
input_arc_CPM_nz$map_loaded$Axis01 <- scores(pcoa_arc)[,1]
input_arc_CPM_nz$map_loaded$Axis02 <- scores(pcoa_arc)[,2]
micro.hulls <- ddply(input_arc_CPM_nz$map_loaded, c("Environment"), find_hull)
g_arc <- ggplot(input_arc_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F, size = 0.25) +
geom_point(size = 1, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1arc, "%", sep = ""),
y = paste("PC2: ", pcoaA2arc, "%", sep = "")) +
ggtitle("Archaea") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, vjust = -1))
g_arc
# Bacteria
input_bac <- filter_taxa_from_input(input,
taxa_to_keep = "Bacteria",
at_spec_level = 1)
nrow(input_bac$data_loaded) # 2679
input_bac_CPM <- input_bac
for (i in 1:ncol(input_bac$data_loaded)) {
for (j in 1:nrow(input_bac$data_loaded)) {
input_bac_CPM$data_loaded[j, i] <- (input_bac$data_loaded[j, i]*1000000)/input_bac$map_loaded$GenomeSize[i]
}
}
# Check zeroes - none, all samples had bacteria
countbac <- as.data.frame(sort(colSums(input_bac_CPM$data_loaded))) %>%
filter(`sort(colSums(input_bac_CPM$data_loaded))` == 0)
# BC, PERMANOVA, PERMDISP, PCoA
bc_bac <- calc_dm(input_bac_CPM$data_loaded)
set.seed(1150)
pcoa_bac <- cmdscale(bc_bac, k = nrow(input_bac_CPM$map_loaded) - 1, eig = T)
pcoaA1bac <- round((eigenvals(pcoa_bac)/sum(eigenvals(pcoa_bac)))[1]*100, digits = 1)
pcoaA2bac <- round((eigenvals(pcoa_bac)/sum(eigenvals(pcoa_bac)))[2]*100, digits = 1)
input_bac_CPM$map_loaded$Axis01 <- scores(pcoa_bac)[,1]
input_bac_CPM$map_loaded$Axis02 <- scores(pcoa_bac)[,2]
micro.hulls <- ddply(input_bac_CPM$map_loaded, c("Environment"), find_hull)
g_bac <- ggplot(input_bac_CPM$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F, size = 0.25) +
geom_point(size = 1, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1bac, "%", sep = ""),
y = paste("PC2: ", pcoaA2bac, "%", sep = "")) +
ggtitle("Bacteria") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, vjust = -1))
g_bac
# Remake first one with fungi title
input_fungi_CPM_nz$map_loaded$Axis01 <- scores(pcoa)[,1]
input_fungi_CPM_nz$map_loaded$Axis02 <- scores(pcoa)[,2]
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Environment"), find_hull)
g <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F, size = 0.25) +
geom_point(size = 1, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1, "%", sep = ""),
y = paste("PC2: ", pcoaA2, "%", sep = "")) +
ggtitle("Fungi") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, vjust = -1))
g
pcoa <- cmdscale(bc, k = nrow(input_fungi_CPM_nz$map_loaded) - 1, eig = T)
pcoaA1 <- round((eigenvals(pcoa)/sum(eigenvals(pcoa)))[1]*100, digits = 1)
pcoaA2 <- round((eigenvals(pcoa)/sum(eigenvals(pcoa)))[2]*100, digits = 1)
input_fungi_CPM_nz$map_loaded$Axis01 <- scores(pcoa)[,1]
input_fungi_CPM_nz$map_loaded$Axis02 <- scores(pcoa)[,2]
micro.hulls <- ddply(input_fungi_CPM_nz$map_loaded, c("Environment"), find_hull)
g <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F, size = 0.25) +
geom_point(size = 1, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1, "%", sep = ""),
y = paste("PC2: ", pcoaA2, "%", sep = "")) +
ggtitle("Fungi") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, vjust = -1))
g
plot_grid(g_arc,g_bac,g,g_leg, ncol = 2, hjust = "hv")
g <- ggplot(input_fungi_CPM_nz$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F) +
geom_point(size = 2, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1, "%", sep = ""),
y = paste("PC2: ", pcoaA2, "%", sep = "")) +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
g
# There's basically no clustering of fungal composition by environment at genus level, lots of overlap!
# Extract legend to plot separately as its own panel later
g_leg <- get_legend(g)
plot_grid(g_arc,g_bac,g,g_leg, ncol = 2, hjust = "hv")
#### _Subset ####
# Lopsided sample sizes may be throwing things off
# Randomly sample 26 samples from each environment and redo
table(input_fungi_CPM_nz$map_loaded$Environment)
table(input_bac_CPM$map_loaded$Environment)
table(input_arc_CPM$map_loaded$Environment)
set.seed(1210)
subset26 <- input_fungi_CPM_nz$map_loaded %>%
group_by(Environment) %>%
slice_sample(n = 26)
table(subset26$Environment)
sum(table(subset26$Environment)) # 208
sub_arc <- filter_data(input_arc_CPM_nz,
filter_cat = "sampleID",
keep_vals = subset26$sampleID) # 205 (3 had zero Archaea)
sub_bac <- filter_data(input_bac_CPM,
filter_cat = "sampleID",
keep_vals = subset26$sampleID) # 208, good
sub_fun <- filter_data(input_fungi_CPM_nz,
filter_cat = "sampleID",
keep_vals = subset26$sampleID) # 208, good
bc_arc2 <- calc_dm(sub_arc$data_loaded)
pcoa_arc2 <- cmdscale(bc_arc2, k = nrow(sub_arc$map_loaded) - 1, eig = T)
pcoaA1arc2 <- round((eigenvals(pcoa_arc2)/sum(eigenvals(pcoa_arc2)))[1]*100, digits = 1)
pcoaA2arc2 <- round((eigenvals(pcoa_arc2)/sum(eigenvals(pcoa_arc2)))[2]*100, digits = 1)
sub_arc$map_loaded$Axis01 <- scores(pcoa_arc2)[,1]
sub_arc$map_loaded$Axis02 <- scores(pcoa_arc2)[,2]
micro.hulls <- ddply(sub_arc$map_loaded, c("Environment"), find_hull)
g_arc2 <- ggplot(sub_arc$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F, size = 0.25) +
geom_point(size = 1, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1arc2, "%", sep = ""),
y = paste("PC2: ", pcoaA2arc2, "%", sep = "")) +
ggtitle("Archaea") +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, vjust = -1))
g_arc2
bc_bac2 <- calc_dm(sub_bac$data_loaded)
pcoa_bac2 <- cmdscale(bc_bac2, k = nrow(sub_bac$map_loaded) - 1, eig = T)
pcoaA1bac2 <- round((eigenvals(pcoa_bac2)/sum(eigenvals(pcoa_bac2)))[1]*100, digits = 1)
pcoaA2bac2 <- round((eigenvals(pcoa_bac2)/sum(eigenvals(pcoa_bac2)))[2]*100, digits = 1)
sub_bac$map_loaded$Axis01 <- scores(pcoa_bac2)[,1]
sub_bac$map_loaded$Axis02 <- scores(pcoa_bac2)[,2]
micro.hulls <- ddply(sub_bac$map_loaded, c("Environment"), find_hull)
g_bac2 <- ggplot(sub_bac$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F, size = 0.25) +
geom_point(size = 1, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1bac2, "%", sep = ""),
y = paste("PC2: ", pcoaA2bac2, "%", sep = "")) +
ggtitle("Bacteria") +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, vjust = -1))
g_bac2
bc_fun2 <- calc_dm(sub_fun$data_loaded)
pcoa_fun2 <- cmdscale(bc_fun2, k = nrow(sub_fun$map_loaded) - 1, eig = T)
pcoaA1fun2 <- round((eigenvals(pcoa_fun2)/sum(eigenvals(pcoa_fun2)))[1]*100, digits = 1)
pcoaA2fun2 <- round((eigenvals(pcoa_fun2)/sum(eigenvals(pcoa_fun2)))[2]*100, digits = 1)
sub_fun$map_loaded$Axis01 <- scores(pcoa_fun2)[,1]
sub_fun$map_loaded$Axis02 <- scores(pcoa_fun2)[,2]
micro.hulls <- ddply(sub_fun$map_loaded, c("Environment"), find_hull)
g_fun2 <- ggplot(sub_fun$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Environment, fill = Environment),
alpha = 0.1, show.legend = F, size = 0.25) +
geom_point(size = 1, alpha = 0.5, aes(colour = Environment),
show.legend = T) +
labs(x = paste("PC1: ", pcoaA1fun2, "%", sep = ""),
y = paste("PC2: ", pcoaA2fun2, "%", sep = "")) +
ggtitle("Fungi") +
theme_bw() +
theme(legend.position = "none",
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, vjust = -1))
g_fun2
plot_grid(g_arc2,g_bac2,g_fun2,g_leg, ncol = 2, hjust = "hv")
pdf("Figs/PCoA_ArcBacFun_n26.pdf", width = 8, height = 5)
plot_grid(g_arc2,g_bac2,g_fun2,g_leg, ncol = 2, hjust = "hv")
dev.off()
